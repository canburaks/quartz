{"aws/index":{"title":"index","links":["API-Gateway","CodeBuild","CodeCommit","CodeDeploy","CodePipeline","CloudFormation","CloudWatch","Cognito","DynamoDB","EC2","ECS","EFS","Elasticache","EventBridge","ElasticBeanstalk","IAM","Kinesis","KMS","Lambda","Load-Balancer","RDS","S3","SAM","SQS","SNS","Systems-Manager","Step-Functions","X-Ray"],"tags":[],"content":"Study Notes for AWS Developer Associate Exam\nI thought it would be nice to publish my study notes. It is easier to publish my notes with Obsidian Publish rather than publishing on blogging platforms.\nNotations\n\nüåù -‚áí Required\nüåó -‚áí Optional\nüçÇ -‚áí Less Preferrable\nüçÉ -‚áí Preferrable\n1Ô∏è‚É£ -‚áí Order Notation\nüìå -‚áí Default\n‚úÖ -‚áí Supported / Valid\n‚ùå -‚áí Not Supported / Not Valid\nüçè ‚áí Pro\nüçé -‚áí Con\n\nExam Topics\n\nAPI Gateway\nAWS CLI üîó\nCI/CD\n\nCodeBuild\nCodeCommit\nCodeDeploy\nCodePipeline\n\n\nCloudFormation\nCloudWatch\nCognito\nDynamoDB\nEC2\nECS\nEFS\nElasticache\nEventBridge\nElasticBeanstalk\nIAM\nKinesis\nKMS\nLambda\nLoad Balancer\n Aurora\nS3\nSAM\nSQS\nSNS\nSystems Manager\nStep Functions\nX-Ray\n\nTopics\nStorage Services\n\nS3\nEFS\n\nTO IMPLEMENT\n\nLoad balancer with headers\n\nLambda\nEC2\n\n\nAPI Gateway\n\nCache invalidation\nStages\n\n\nLambda\n\nState Machines\n\n\nKMS\n\nDecrypt\nEncrypt\n\n\nCodeCommit\n\nGit account\n\n\nSNS\n\nCreate an SNS topic\n\n\n\nTODOs\n\n DynamoDB\n\n DynamoDB query and scans\n Consumed Capacity &amp; API\n DynamoDB local and global secondary indexes\n\n pessimistic optimistic locking\n\n\n hot partitions\n\n\n CloudFormation stacks and test stacks\n\n Inline Code\n Helper scripts\n\n cfn-signal\n cfn-get-metadata\n cfn-init\n cfn-hup\n\n\n CLI\n\n create-stack\n create-stack-set\n deploy\n update-stack\n\n\n\n\n CloudWatch\n\n Namespace\n Dimension\n Alarm\n Event\n\n\n CodeCommit test\n CodeBuild test\n CodeDeploy\n\n Can deploy on-premise servers?\n Which port it communicates?\n AppSpec file sections\n AWS SDK for CodeDeploy\n\n Build case\n Deploy case\n\n\n\n\n Code Pipeline\n\n Manual approval\n\n\n X-Ray SDK\n\n How to view the full traces of their application without using the X-Ray console\n PutTraceSegments\n subsegments\n annotations\n tracing header\n metadata\n Which port X-Ray utilizes?\n which source will AWS X-Ray fetch the client IP address?\n IAM policies\n\n\n MessageDeduplicationId\n sam-cli\n Cognito\n\n Adaptive Authentication for the User Pool\n User pools and Identity pools\n\n\n EC\n\n EC2 Spot Fleet\n How to get public and private IP addresses from the instance?\n\n http://169.254.169.254/latest/meta-data/\n http://169.254.169.254/latest/userdata/\n\n\n Auto scaling\n\n\n ECS\n\n Live implementation\n Task definitions\n\n spread\n random\n binpack\n\n\n\n\n EFS\n\n shared persisted data\n\n\n EKS\n ElasticBeanstalk\n\n environment config file\n deployment types\n\n immutable\n rolling with additional batch\n all at once\n rolling\n\n\n Caching\n\n Lazy-loading\n Write through\n\n\n\n\n WAF\n IAM\n\n LDAP\n --profile\n\n\n API Gateway\n\n Proxy configs:\n HTTP_PROXY\n AWS_PROXY\n\n\n Kinesis Shards\n\n How to avoid deduplication\n Cold / Hot shards\n\n\n Amplify\n\n amplifyconfiguration.json\n aws-exports.js\n amplify.yml\n\n\n RDS\n\n How different process uses CPU , total memory etc.?\n Enhanced monitoring\n\n\n Systems Manager State Manager\n\n What is the purpose of this service?\n NoChangeNotification\n Difference between Secret Manager and Parameter store\n\n\n AWS Service Catalog and AWS Config\n Systems Manager Parameter Store\n SNS\n\n Fan-out pattern\n\n\n SQS\n\n Batch pattern\n\n\n\nResources\n\nTutorial Dojo‚Äôs AWS Cheat Sheet\n\n"},"aws/services/API-Gateway":{"title":"API Gateway","links":["Lambda","EC2","ElasticBeanstalk","ECS","tags/timeout","Step-Functions","tags/http-header","tags/query-string","tags/base64","tags/ttl","IAM","tags/role"],"tags":["api-gateway","timeout","http-header","query-string","base64","ttl","role"],"content":"They are not used in API Gateway to determine which version of the API to route traffic to based on the request header.\nAPI Gateway Features\n\nFully managed service for RESTful APIs.\nBack-end service that are powered by\n\nAWS Lambda\nAWS EC2\nAWS ElasticBeanstalk\nAWS Elastic Container Service (ECS)\nAny web application\n\n\nAPI Gateway‚Äôs integrationtimeout is 29 seconds\nAPI Gateway Stage\n\nAPI Gateway Stage is a named reference to a deployment (a snapshot of the APl).\nUse a stage to manage and optimize a particular deployment.\nYou can configure stage settings to enable caching, customize request throttling, configure logging, define stage variables, or attach a canary release for testing.\n\n\nEnvironment Variables\n\nUsed to pass variables and parameters to a Lambda function.\n\n\n\n\n\n                  \n                  Warning\n                  \n                \n\nAPI Gateway is used to expose APls and route API requests to their correct destination. It is not used to build and manage complex business workflows for distributed systems. Otherwise, use Step Functions.\n\n\nRequest &amp; Response Flow\n\nA simple request-response flow\n\n1Ô∏è‚É£ Method Request\n\nDefineshttp-header\nClient request is validated\nAuthoriation can be set up in here\nValidate body for a Lambda function.\nDeclare any input body such asquery-string\n\n\n2Ô∏è‚É£ Integration Request\n\nThe section contains settings about\n\nHow API Gateway communicates with the backend\n\nLamda function\nHTTP endpoint\nMock\nAWS Service\nVPC Link\n\n\nIntegration type\n\nProxy\n\nClient request is transmitted as-is to the backend\n\n\nNon-proxy\n\nOption to use mapping templates to model the structure of the request daya that gets forwarded to the backend.\nChange data\n\n\n\n\n\n\n\n\n3Ô∏è‚É£üåù Integration Response (Only in Non-proxy)\n\nIntercepts the result before it is returned to the client\nMust configure at least one Integration Response\n\nDefault: Passthrough which returns the result as-is\n\n\nCan transform the response to another format likebase64\n\n\n4Ô∏è‚É£ Method Response\n\nDefineshttp-header the method can return\n\n\n\n\n\nAPI Types\n\nREST API\n\nComplete control on request-response flow\n\nCreate API Keys\nCaching\nUsagePlans\n\n\n\n\nHTTP API\n\nCheaper than REST API\nUse for simple applications\nLacks many API Gateway features\n\n\nWebSocket API\n\nUse for real-time applications\n\n\nSOAP (Support)\n\nPassthrough\nConvert XML to JSON\n\n\n\nMethods\n\nNon-proxy\n\nLambda function\nHTTP\nMock\nAWS Service\nVPC Link\n\n\nProxy\n\nLamda Proxy\nHTTP Proxy\n\n\n\ndocs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html\ndocs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-basic-concept.html\ndocs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-integration-types.html\n\nStage Variables\nAllows to use different Lambda versions by using stage variables as a placeholder.\ndocs.aws.amazon.com/apigateway/latest/developerguide/stage-variables.html\ndocs.aws.amazon.com/apigateway/latest/developerguide/canary-release.html\n\nCaching\n\nAPI Gateway doesn‚Äôt update the cache entries untilttl expires\nInvalidate by using &#039;Cache-Control&#039;: &#039;max-age=0&#039;\nIn order to invalidate cache by client\n\nCache-Control: max-age=0http-header must be sent.\n&quot;execute-api: InvalidateCache&quot; IAMrole must be granted.\n\n\n\n‚Ä≠\nUsage Plans\naws.amazon.com/blogs/aws/new-usage-plans-for-amazon-api-gateway/\ndocs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html"},"aws/services/CDK":{"title":"CDK","links":[],"tags":["cdk"],"content":"Cloud Development Kit\n\nThe AWS CDK is an open-source framework that you can use to manage your AWS infrastructure using code.\nCDK consists of two parts:\n\nAWS CDK Contruction Library üîó\nAWS CDK Toolkit  üîó\n\n\nFiles and folders:\n\ncdk.json\n\nConfiguration file for the AWS CDK.\nThis file provides instruction to the AWS CDK CLI regarding how to run your app.\n\n\n\n\nCDK available in those languages:\n\nTypeScript\nJavaScript\nPython\nJava\nC#\nGo\n\n\n\nAWS CDK Concepts\n\nApps\n\nA collection of one or more CDK stacks.\nDoesn‚Äôt configure AWS resources on their own.\nProvide context for other constructs.\n\n\nStacks\n\nA collection of one or more constructs.\nDoesn‚Äôt configure AWS resources on their own.\nProvide context for other constructs.\n\n\nNode üîó\n"},"aws/services/CloudFormation":{"title":"CloudFormation","links":["S3","EC2"],"tags":["cloudformation"],"content":"CloudFormation Features\n\nTemplates can be\n\nJSON\nYAML\n\n\nTakes template from S3  and creates an evironment\n\nConcepts\nStack üîó\n\nIndividual resources and treated as a single unit\nIf it fails during creation, it reverts to its last working state if it has. Otherwise, all resources are terminated.\ncreate-stack command creates a stack as specified in the template provided.\n\nCloudFormation Template üîó\n\nüåó AWSTemplateFormatVersion - lets you set the version of the template that you want to use, which determines the capabilities of the template. If you don‚Äôt assign a version, CloudFormation automatically assumes that you want to use the latest version.\nüåó Description - allows you to include comments about your template to help you better describe and add more details about your template.\nüåó Metadata - allows you to provide objects that provide details about the template or even implementation details of specific resources.\nüåù Resources - This is where you define all resources that you want to include in your stack.  AWS resources such as EC2 instance, Lambda function, S3 bucket are declared in the Resources section. Take note that the Resources section is the only REQUIRED section in a CloudFormation template. All other sections are optional.\nüåó Mappings - matches a key to a corresponding set of named values.\nüåó Parameters - when writing CloudFormation templates, it‚Äôs very unlikely to be hardcoding values such as AMI ID, security group ID, and so on. Parameters enable users to pass values dynamically based on their use case.\nüåó Conditions - defines conditions by using the intrinsic condition functions. These conditions determine when AWS CloudFormation creates the associated resources.\nüåó Transform - you can use this section to write templates in the AWS Serverless Application Model (AWS SAM) syntax. The syntax used in SAM is different from the standard CloudFormation template. Behind the scenes, CloudFormation converts and ‚Äòtransforms‚Äô the templates written under the Transform section into a regular CloudFormation template.\nüåóOutputs - Describes the values that are returned whenever you view your stack‚Äôs properties. For example, you can declare an output for an S3 bucket name and then call the describe-stacks AWS CLI command to view the name.\n\nLogical ID (also called logical name)\n\nAn identifier for the current output. The logical ID must be alphanumeric (a‚Äìz, A‚ÄìZ, 0‚Äì9) and unique within the template.\n\n\nDescription (optional)\n\nA String type that describes the output value. The value for the description declaration must be a literal string that‚Äôs between 0 and 1024 bytes in length. You can‚Äôt use a parameter or function to specify the description.\n\n\nValue (required)\n\nThe value of the property returned by the aws cloudformation describe-stacks command. The value of an output can include literals, parameter references, pseudo-parameters, a mapping value, or intrinsic functions.\n\n\nExport (optional)\n\nThe name of the resource output to be exported for a cross-stack reference.\n\n\n\n\n\nHelper Scripts üîó\nAWS CloudFormation provides the following Python helper scripts that you can use to install software and start services on an Amazon EC2 instance that you create as part of your stack:\n\nHelper scripts don‚Äôt require credentials\nHelper scripts\n\ncfn-init\n\nUse to retrieve and interpret resource metadata, install packages, create files, and start services.\n\n\ncfn-signal\n\nUse to signal with a CreationPolicy or WaitCondition, so you can synchronize other resources in the stack when the prerequisite resource or application is ready.\n\n\ncfn-get-metadata\n\nUse to retrieve metadata for a resource or path to a specific key.\n\n\ncfn-hup\n\nUse to check for updates to metadata and execute custom hooks when changes are detected.\n\n\n\n\n\n\n\n                  \n                  Warning\n                  \n                \n\nThe scripts aren‚Äôt executed by default. You must include calls in your template to execute specific helper scripts.\n\n\nCloudFormation Template Samples\nMapping\nAWSTemplateFormatVersion: &quot;2010-09-09&quot;\nMappings: \n  RegionMap: \n    us-east-1:\n      HVM64: ami-0ff8a91507f77f867\n      HVMG2: ami-0a584ac55a7631c0c\n    us-west-1:\n      HVM64: ami-0bdb828fd58c52235\n      HVMG2: ami-066ee5fd4a9ef77f1\n    eu-west-1:\n      HVM64: ami-047bb4163c506cd98\n      HVMG2: ami-0a7c483d527806435\n    ap-northeast-1:\n      HVM64: ami-06cd52961ce9f0d85\n      HVMG2: ami-053cdd503598e4a9d\n    ap-southeast-1:\n      HVM64: ami-08569b978cc4dfa10\n      HVMG2: ami-0be9df32ae9f92309\nResources: \n  myEC2Instance: \n    Type: &quot;AWS::EC2::Instance&quot;\n    Properties: \n      ImageId: !FindInMap [RegionMap, !Ref &quot;AWS::Region&quot;, HVM64]\n      InstanceType: m1.small\nIntrinsic Functions and Pseudo Parameters\n!Ref‚Ä¨‚Ä≠\nReturns the value of a parameter or resource.‚Ä¨‚Ä≠ When you specify a resource‚Äôs logical name, it‚Ä¨‚Ä≠ outputs a value that you can use to refer to that resource (e.g., instance id, bucket name, API ID).‚Ä¨ ‚Ä≠ Usually, in a stack, there‚Äôll be dependencies between resources.\nFor example, if you want to attach an Elastic IP address (EIP) to an EC2 instance, you must specify the instance using its instance id. The thing is, the instance id won‚Äôt be available until the EC2 instance is created, so hardcoding it in the CloudFormation template is not possible. To get around this, we can use the Ref function to retrieve the instance id once it‚Äôs available and have CloudFormation insert it during stack creation.\nResources:\n  MyEC2Instance:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: ami-0cd490fb43e2559ed\n      InstanceType: t2.micro\n  MyEIP:\n    Type: AWS::EC2::EIPz\n    Properties:\n        InstanceId: !Ref MyEC2Instance\n!FindInMap\nThis one only works with the Mappings section. FindInMap returns a named value based on a specified key. For example, suppose you have custom AMIs in us-east-1 and us-east-2. And you want to make sure their image ids are accessible at runtime regardless of the region the stack is deployed. First, create a two-level map under the Mappings section. Each map is a key that points to a name-value pair. Make the regions your top-level keys, followed by a name-value pair that represents the AMI name and its corresponding image id. Retrieve the image ids with FindInMap using the syntax below:\nMappings:\n  MyRegions:\n    us-east-1:\n      CustomUbuntu: ami-0cd490fb43e2559ed\n    us-east-2:\n      CustomUbuntu: ami-01581ffba5551cdf3\n \nResources:\n  MyEC2Instance:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !FindInMap [ MyRegions, !Ref &quot;AWS::Region&quot;, CustomUbuntu ]\n      InstanceType: t2.micro\n!GetAtt\nReturns the value of an attribute from a resource. This intrinsic function works similar to how the !Ref function works. Except that this time, there are more values to choose from depending on the resource.\nSyntax for the function name (shorthand):\n!GetAtt logicalNameOfResource.attributeName\nThe AWS::EC2::Instance resource contains attributes such as the availability zone where the specified instance is launched, its private and public IP address, and public DNS name. If you want to retrieve the public IP of the MyEC2Instance resource, use the !GetAtt MyEC2Instance.PublicIp function. Always check the documentation for the attributes available to a particular resource.\n\ndocs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacks.html‚Ä¨\ndocs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html‚Ä¨\ndocs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html‚Ä¨\n"},"aws/services/CloudTrail":{"title":"CloudTrail","links":["tags/api"],"tags":["cloud-trail","api","monitoring"],"content":"CloudTrail Features\n\nCloudTrail event history is used to recordapi calls for\n\nGovernance\nCompliance operation\nRisk auditing purposes\n\n\n\n\n\n                  \n                  Warning\n                  \n                \n\nCloudTrail is not a service that is used for identifying application performance issues.\n\n"},"aws/services/CloudWatch":{"title":"CloudWatch","links":["SNS","Lambda","API-Gateway","tags/timeout"],"tags":["cloudwatch","timeout"],"content":"CloudWatch Features\n\nCloudWatch alarms can be used to send SNS notifications when an alarm changes state.\nCloudWatch is not the correct service to use to send a copy of the  invocation record for failed Lambda invocations.\n\nCloudWatch Concepts\n\nNamespaces\n\nA namespace is a container for CloudWatch metrics. Metrics in different namespaces are isolated from each other, so that metrics from different applications are not mistakenly aggregated into the same statistics.\nThe AWS namespaces typically use the following naming convention:¬†AWS/{service}service. For example, Amazon EC2 uses the¬†AWS/EC2¬†namespace.\n\n\nMetrics\n\nTime-ordered set of data points that are published to CloudWatch.\nMetrics cannot be deleted, but they automatically expire after 15 months if no new data is published to them.\nData points older than 15 months expire on a rolling basis\nMetrics are uniquely defined by a name, a namespace, and zero or more dimensions.\nEach data point in a metric has a time stamp, and (optionally) a unit of measure.\n\n\nDimensions\n\nA dimension is a name/value pair that is part of the identity of a metric.\nYou can assign up to 30 dimensions to a metric.\n\n\n\nMetrics\n\nRetention\n\nData points less than 60 seconds are available for 3 hors. (High-res)\nData points with a period of\n\n60 seconds are available for 15 days.\n300 seconds are available for 63 days.\n3600 seconds are available for 455 days / 15 months.\n\n\n\n\nConcepts\n\nCount\n\nCount relates to the total number of API requests in a given period. It will not help you to understand why the API is timing out.\n\n\nLatency\n\nLatency relates to the time between when API Gateway receives a request from a client and when it returns a response to the client. The latency includes the integration latency and other API Gateway overhead. This is useful because a latency issue could be causing thetimeout.\n\n\nIntegrationLatency\n\nIntegrationLatency relates to the time between when API Gateway relays a request to the backend and when it receives a response from the backend. This is useful because a latency issue could be causing the timeout.\n\n\n\n\n\n\n\n                  \n                  Memory Utilization \n                  \n                \n\nThe metrics that AWS provides can be collected at the hypervisor level. But memory metrics (like disk metrics) is from the OS level. So it is a custom metric that you have to periodically push to CloudWatch. Sourde\n\n"},"aws/services/CodeBuild":{"title":"CodeBuild","links":[],"tags":[],"content":""},"aws/services/CodeCommit":{"title":"CodeCommit","links":[],"tags":[],"content":""},"aws/services/CodeDeploy":{"title":"CodeDeploy","links":["EC2","ECS","Lambda"],"tags":["code-deploy","ci-cd"],"content":"CodeDeploy Features\n\nUses Port 443\nLifecycle\n\nApplicationStop\nBeforeInstall\nAfterInstall\nApplicationStart\nValidateService\n\n\nCompute platforms available:\n\nEC2 / On-premises\nECS\nLambda\n\n\nDeployment configurations\n\nCanary\n\nTraffic is shifted in two increments.\n\n\nLinear\n\nTraffic is shifted in equal increments with an equal number of minutes between each increment.\n\n\nAll-at-once\n\nAll traffic is shifted.\n\n\n\n\nDeployment types\n\nIn-place\n\nOnly deployments that use the EC2/On-Premises compute platform can use in-place deployments.\n\n\nBlue/Green\n\n\n\nAppSpec File\nAppSpec File Structure\nECS\nversion: 0.0\nresources: \n  ecs-service-specifications\nhooks: \n  deployment-lifecycle-event-mappings\nEC2\nversion: 0.0\nos: operating-system-name\nfiles:\n  source-destination-files-mappings\npermissions:\n  permissions-specifications\nhooks:\n  deployment-lifecycle-event-mappings\nLambda\nversion: 0.0\nresources: \n  lambda-function-specifications\nhooks: \n  deployment-lifecycle-event-mappings\nExample AppSpec File for EC2\nversion: 0.0\nos: linux\nfiles:\n  - source: /\n    destination: /var/www/html/WordPress\nhooks:\n  BeforeInstall:\n    - location: scripts/install_dependencies.sh\n      timeout: 300\n      runas: root\n  AfterInstall:\n    - location: scripts/change_permissions.sh\n      timeout: 300\n      runas: root\n  ApplicationStart:\n    - location: scripts/start_server.sh\n    - location: scripts/create_test_db.sh\n      timeout: 300\n      runas: root\n  ApplicationStop:\n    - location: scripts/stop_server.sh\n      timeout: 300\n      runas: root\n "},"aws/services/CodePipeline":{"title":"CodePipeline","links":["S3","CodeCommit","CodeBuild","CloudFormation","ECS","ElasticBeanstalk","CodeDeploy","SNS","Lambda","Step-Functions"],"tags":["code-pipeline","ci-cd"],"content":"CodePipeline Features\n\nCodePipeline allows you to create a test stage with a test action prior to the deployment stage.\nWhen an action is failed in a stage, there are two options:\n\nStop and wait\nStop and abondon\n\n\nA pipeline of workflow is composed of stages.\nExecution modes:\n\nüìå SUPERSEDED\nQUEUED\nPARALLEL\n\n\nStatus:\n\nInProgress\nStopping\nStopped\nSucceeded\nSuperseded\nFailed\n\n\nThe flow of pipeline executions can be controlled by:\n\nA transition\nAn approval action\nA failure\n\n\nAction integrations üîó\n\nSource action integrations\n\nElastic Container Registry\nS3\nConnections to Bitbucket Cloud, GitHub (version 2), GitLab etc.\nCodeCommit\nGitHub (version 1)\n\n\nBuild action integrations\n\nCodeBuild\nCloudBees√ºJenkins\nTeamCity\n\n\nTest action integrations\n\nCodeBuild\nAWS Device Farm\nGhost Inspector\nOpenText LoadRunner\n\n\nDeploy action integrations\n\nS3\nAWS AppConfig\nCloudFormation and StackSets deploy actions\nECS\nElasticBeanstalk\nAWS OpsWork\nCodeDeploy\nAmazon Alexa\nService Catalog\nXebiaLabs\n\n\nApproval action integration with SNS\n\nPush notifications to mobile device users\nEmail recipients\nOther distributed services\n\n\nInvoke action integrations\nLambda\nSnyk\nStep Functions\n\n\n"},"aws/services/Cognito":{"title":"Cognito","links":[],"tags":["cognito","authentication"],"content":"Cognito Features\n\nTerminology\n\nWeb Identity Federation\n\nAllows users to access AWS resources after they are authenticated with a web-based IdP like Amazon, Facebook, or Google\n\n\nUser pool\n\nThe directory of users, such as user profiles of the app\nAdaptive authentication\n\nA feature of advanced security that detects potential malicious activity and applies additional security to user profiles.\n\n\n\n\nIdentity pool\n\nAuthorize authenticated ot anonymous users to access AWS res.\nCreates token to retrieve temporary credentials from AWS STS\nGrants role-based and attribute-based access control.\n\n\n\n\n\n"},"aws/services/DynamoDB":{"title":"DynamoDB","links":["tags/string","tags/number","tags/boolean","tags/binary","tags/list","tags/json","tags/high-throughput","tags/az","IAM","tags/java","tags/dotnet","tags/version"],"tags":["dynamodb","string","number","boolean","binary","list","json","high-throughput","az","java","dotnet","version"],"content":"DynamoDB Features\n\nA mix of key-value and document database.\nThe value can bestring,number,boolean,binary,list,json\nProvideshigh-throughput and single-digit latency\nBy Replicates data across multipleaz\nPermissions are handles by IAM service. No need to provide a db-endpoint, username or password.\nCore components\n\nTable\n\nThe name must be unique for the base table it is associated with, but you can use the same name for indexes that are associated with different base tables.\n\n\nItem\nAttribute\n\n\nOptimistic locking üîó (java  anddotnet )\n\nOptimistic locking is a strategy to ensure that the client-side item that you are updating (or deleting) is the same as the item in Amazon DynamoDB\nIt allows only update an item if the version on the server was not changed. If another user updates it before you, just retrieve the item with a freshversion and then trying to update it.\n\n\nPartitions\n\nHot partitions\n\nA hot partition occurs when a disproportionate amount of traffic is directed toward a single partition.\nResults in\n\nThrottling\nLatency\nUneven performance\n\n\n\n\nCold partitions\n\nOpposite of hot partitions.\nOccurs when a partition is under utilized.\n\n\n\n\n\ndocs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html‚Ä¨\ndocs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html‚Ä¨\n‚Ä≠\nPrimary and Secondary Keys\nPrimary Keys\n\nPartition key\n\nunique value of an item in a table\n\n\nComposite Key (Partition Key + Sort Key)\n\nPartition Key\nSort key\n\n\n\nSecondary Keys\n\nEvery secondary index is associated with exactly one table, from which it obtains its data\nYou also define the attributes that you want to be projected, or copied, from the base table into the index. DynamoDB copies these attributes into the index, along with the primary key attributes from the base table. You can then query or scan the index just as you would query or scan a table.\nTypes of secondary indexes\n\nLocal Secondary Index (LSI)\n\nA local secondary index uses the same partition key as defined on the table, but a different attribute as the sort key\nCan only be created during the table creation\nSupport both eventual and strong consistency\nAn index that has the same partition key as the base table, but a different sort key. A local secondary index is ‚Äúlocal‚Äù in the sense that every partition of a local secondary index is scoped to a base table partition that has the same partition key value\nThe partition key must be the same as the base table‚Äôs partition key, and the sort key must be a non-key base table attribute.\n\n\nGlobal Secondary Index (GSI)\n\nCan be created and deleted any time\nSupports only eventual consistency\nA global secondary index is considered ‚Äúglobal‚Äù because queries on the index can span all of the data in the base table, across all partitions.\nA global secondary index is stored in its own partition space away from the base table and scales separately from the base table. (Different provisioned throughput)\nCan be any scalar attribute of the base table. A sort key is optional, and it too can be any scalar attribute of the base table.\n\n\n\n\n\naws.amazon.com/blogs/database/how-to-design-amazon-dynamodb-global-secondary-indexes\ndocs.aws.amazon.com/amazondynamodb/latest/developerguide/SecondaryIndexes.html\ndocs.aws.amazon.com/amazondynamodb/latest/developerguide/LSI.html\n\nProjections\n\nWhen creating an LSI or GSI you set the list of attributes that you want to project or copy from the base table to the secondary index.\nThe primary keys (partition and sort key) are always projected into the secondary index, but you can also specify non-key attributes that will be projected into the index.\nThree options in projecting attributes:\n\nKEYS_ONLY - all items of an index will only contain the base table‚Äôs primary keys that you set.\nINCLUDE - allow you to choose other non-key attributes that will be included along with the primary keys of your base table.\nALL - all attributes from your base table will be copied into your secondary index.\n\n\n\ndocs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.html\nQuery &amp; Scan\n\nüçÉ Query\n\nPerforms a direct look-up to specific items you want to search for based on a partition key\nMore performant than Scan operations, e\n\n\nüçÇ Scan\n\nScan operation will literally read and return every item in a table\nOptionally provide a filter expression when requesting a Scan to return only a subset of items in the‚Ä¨‚Ä≠ table. However, the filtering occurs only after the scan is completed. In effect, you will still be charged for all‚Ä¨‚Ä≠ items read\n\n\n\nRead &amp; Write Capacity\n\nRead Capacity\n\nOn-Demand Mode\n\nDynamoDB charges you for the reads that your application performs on your tables in terms of read‚Ä¨ ‚Ä≠ request units\n1 Read Request Unit (RRU) equals\n\n4KB/s strongly consistent\n8KB/s eventually consistent\n\n\n\n\nProvisioned Mode\n\nWe specify the number of reads and writes per second that you require for‚Ä¨‚Ä≠ your application.\nCan use auto-scaling to adjust your table‚Äôs provisioned capacity automatically in response‚Ä¨‚Ä≠ to traffic changes\n\n\n\n\nWrite Capacity\n\nOn-Demand Mode\n\n1 Write Request Unit (WRU) equals to 1 write of up to 1 KB/s\n\n\n\n\n\ndocs.aws.amazon.com/amazondynamodb/latest/developerguide/capacity-mode.html\n\nDynamoDB Streams\n\nCaptures item-level changes in a DynamoDB table in near-real-time\nWhen‚Ä¨‚Ä≠ an item is modified using any of the write operations (‚Ä¨‚Ä≠PutItem, UpdateItem, or DeleteItem‚Ä¨‚Ä≠), DynamoDB detects it as an event and sends the modified record to a transaction log.\nRetained for 24 hours\nOrders are preserved\nCan be used for\n\nAggregation of data for auditing\nNotification\n\n\nThe Stream View Type determines what kind of data you want to capture.\n\nKEYS_ONLY - only the key attributes (Partition Key + Sort Key) of the modified item are captured.\nNEW_IMAGE - the latest state of the entire modified item will be captured.\nOLD_IMAGES - the entire item as it appeared prior to the update is captured.\nNEW_AND_OLD_IMAGES - both the latest and the previous state prior to the update is captured.\n\n\n\n\n\n                  \n                  Tip\n                  \n                \n\nIf you need a more complex streaming application, you might want to configure DynamoDB to send records to‚Ä¨\n‚Ä≠ a Kinesis Data stream.\n\n\n\ndocs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\naws.amazon.com/blogs/database/dynamodb-streams-use-cases-and-design-patterns/\ndocs.aws.amazon.com/amazondynamodb/latest/developerguide/kds.html\n\nDynamoDB Accelerator (DAX)\n\n\nIn-memory cache that is purposely built for DynamoDB\n\n\nResponse times in microseconds for millions of requests per second\n\n\nDoesn‚Äôt support strong consistency\n\n\nUse DAX\n\nYou have a read-intensive application that requires response time in the microsecond range.\nYou have a large set of data that are frequently read.\nYour application can eventually tolerate consistent reads.\n\n\n\nDon‚Äôt use DAX\n\nYour application requires strongly consistent reads.\nYour application performs more writes than reads.\n\n\n\naws.amazon.com/dynamodb/global-tables/\n\n\naws.amazon.com/blogs/database/how-to-use-amazon-dynamodb-global-tables-to-power-multiregion-architectures/\n\n\n\nSDK Examples\n\nRequest parameters:\n\n‚ÄúReturnConsumedCapacity\n\nTOTAL: Total number of the capacity consumed\nINDEXES: Total number of capacity consumed  with subtotals for base and secondary indexes affected table.\nNONE: No return\n\n\n\n\nPutItem üîó\nUpdateItem üîó\n-\n- Atomic counters\n- Not an idempotent action\n- Can bu used to track number of visitors\n- Not a solution for apps that overcounter/undercounter sensitive\n- UpdateExpression\n- SET - Adds one or more attributes and values to an item. If any of these attributes already exist, they are replaced by the new values. You can also use SET to add or subtract from an attribute that is of type Number. For example: SET myNum = myNum + :val. Supports the following functions:\n- if_not_exists (path, operand) - if the item does not contain an attribute at the specified path, then if_not_exists evaluates to operand; otherwise, it evaluates to path. You can use this function to avoid overwriting an attribute that may already be present in the item.\n- list_append (operand, operand) - evaluates to a list with a new element added to it. You can append the new element to the start or the end of the list by reversing the order of the operands.\n- REMOVE - Removes one or more attributes from an item.\n- ADD - Adds the specified value to the item, if the attribute does not already exist.\n- ReturnValue\n- NONE - If ReturnValues is not specified, or if its value is NONE, then nothing is returned. (This setting is the default for ReturnValues.)\n- ALL_OLD - Returns all of the attributes of the item, as they appeared before the UpdateItem operation.\n- UPDATED_OLD - Returns only the updated attributes, as they appeared before the UpdateItem operation.\n- ALL_NEW - Returns all of the attributes of the item, as they appear after the UpdateItem operation.\n- UPDATED_NEW - Returns only the updated attributes, as they appear after the UpdateItem operation.\n\nAWS Reserved Words\n \nABORT\nABSOLUTE\nACTION\nADD\nAFTER\nAGENT\nAGGREGATE\nALL\nALLOCATE\nALTER\nANALYZE\nAND\nANY\nARCHIVE\nARE\nARRAY\nAS\nASC\nASCII\nASENSITIVE\nASSERTION\nASYMMETRIC\nAT\nATOMIC\nATTACH\nATTRIBUTE\nAUTH\nAUTHORIZATION\nAUTHORIZE\nAUTO\nAVG\nBACK\nBACKUP\nBASE\nBATCH\nBEFORE\nBEGIN\nBETWEEN\nBIGINT\nBINARY\nBIT\nBLOB\nBLOCK\nBOOLEAN\nBOTH\nBREADTH\nBUCKET\nBULK\nBY\nBYTE\nCALL\nCALLED\nCALLING\nCAPACITY\nCASCADE\nCASCADED\nCASE\nCAST\nCATALOG\nCHAR\nCHARACTER\nCHECK\nCLASS\nCLOB\nCLOSE\nCLUSTER\nCLUSTERED\nCLUSTERING\nCLUSTERS\nCOALESCE\nCOLLATE\nCOLLATION\nCOLLECTION\nCOLUMN\nCOLUMNS\nCOMBINE\nCOMMENT\nCOMMIT\nCOMPACT\nCOMPILE\nCOMPRESS\nCONDITION\nCONFLICT\nCONNECT\nCONNECTION\nCONSISTENCY\nCONSISTENT\nCONSTRAINT\nCONSTRAINTS\nCONSTRUCTOR\nCONSUMED\nCONTINUE\nCONVERT\nCOPY\nCORRESPONDING\nCOUNT\nCOUNTER\nCREATE\nCROSS\nCUBE\nCURRENT\nCURSOR\nCYCLE\nDATA\nDATABASE\nDATE\nDATETIME\nDAY\nDEALLOCATE\nDEC\nDECIMAL\nDECLARE\nDEFAULT\nDEFERRABLE\nDEFERRED\nDEFINE\nDEFINED\nDEFINITION\nDELETE\nDELIMITED\nDEPTH\nDEREF\nDESC\nDESCRIBE\nDESCRIPTOR\nDETACH\nDETERMINISTIC\nDIAGNOSTICS\nDIRECTORIES\nDISABLE\nDISCONNECT\nDISTINCT\nDISTRIBUTE\nDO\nDOMAIN\nDOUBLE\nDROP\nDUMP\nDURATION\nDYNAMIC\nEACH\nELEMENT\nELSE\nELSEIF\nEMPTY\nENABLE\nEND\nEQUAL\nEQUALS\nERROR\nESCAPE\nESCAPED\nEVAL\nEVALUATE\nEXCEEDED\nEXCEPT\nEXCEPTION\nEXCEPTIONS\nEXCLUSIVE\nEXEC\nEXECUTE\nEXISTS\nEXIT\nEXPLAIN\nEXPLODE\nEXPORT\nEXPRESSION\nEXTENDED\nEXTERNAL\nEXTRACT\nFAIL\nFALSE\nFAMILY\nFETCH\nFIELDS\nFILE\nFILTER\nFILTERING\nFINAL\nFINISH\nFIRST\nFIXED\nFLATTERN\nFLOAT\nFOR\nFORCE\nFOREIGN\nFORMAT\nFORWARD\nFOUND\nFREE\nFROM\nFULL\nFUNCTION\nFUNCTIONS\nGENERAL\nGENERATE\nGET\nGLOB\nGLOBAL\nGO\nGOTO\nGRANT\nGREATER\nGROUP\nGROUPING\nHANDLER\nHASH\nHAVE\nHAVING\nHEAP\nHIDDEN\nHOLD\nHOUR\nIDENTIFIED\nIDENTITY\nIF\nIGNORE\nIMMEDIATE\nIMPORT\nIN\nINCLUDING\nINCLUSIVE\nINCREMENT\nINCREMENTAL\nINDEX\nINDEXED\nINDEXES\nINDICATOR\nINFINITE\nINITIALLY\nINLINE\nINNER\nINNTER\nINOUT\nINPUT\nINSENSITIVE\nINSERT\nINSTEAD\nINT\nINTEGER\nINTERSECT\nINTERVAL\nINTO\nINVALIDATE\nIS\nISOLATION\nITEM\nITEMS\nITERATE\nJOIN\nKEY\nKEYS\nLAG\nLANGUAGE\nLARGE\nLAST\nLATERAL\nLEAD\nLEADING\nLEAVE\nLEFT\nLENGTH\nLESS\nLEVEL\nLIKE\nLIMIT\nLIMITED\nLINES\nLIST\nLOAD\nLOCAL\nLOCALTIME\nLOCALTIMESTAMP\nLOCATION\nLOCATOR\nLOCK\nLOCKS\nLOG\nLOGED\nLONG\nLOOP\nLOWER\nMAP\nMATCH\nMATERIALIZED\nMAX\nMAXLEN\nMEMBER\nMERGE\nMETHOD\nMETRICS\nMIN\nMINUS\nMINUTE\nMISSING\nMOD\nMODE\nMODIFIES\nMODIFY\nMODULE\nMONTH\nMULTI\nMULTISET\nNAME\nNAMES\nNATIONAL\nNATURAL\nNCHAR\nNCLOB\nNEW\nNEXT\nNO\nNONE\nNOT\nNULL\nNULLIF\nNUMBER\nNUMERIC\nOBJECT\nOF\nOFFLINE\nOFFSET\nOLD\nON\nONLINE\nONLY\nOPAQUE\nOPEN\nOPERATOR\nOPTION\nOR\nORDER\nORDINALITY\nOTHER\nOTHERS\nOUT\nOUTER\nOUTPUT\nOVER\nOVERLAPS\nOVERRIDE\nOWNER\nPAD\nPARALLEL\nPARAMETER\nPARAMETERS\nPARTIAL\nPARTITION\nPARTITIONED\nPARTITIONS\nPATH\nPERCENT\nPERCENTILE\nPERMISSION\nPERMISSIONS\nPIPE\nPIPELINED\nPLAN\nPOOL\nPOSITION\nPRECISION\nPREPARE\nPRESERVE\nPRIMARY\nPRIOR\nPRIVATE\nPRIVILEGES\nPROCEDURE\nPROCESSED\nPROJECT\nPROJECTION\nPROPERTY\nPROVISIONING\nPUBLIC\nPUT\nQUERY\nQUIT\nQUORUM\nRAISE\nRANDOM\nRANGE\nRANK\nRAW\nREAD\nREADS\nREAL\nREBUILD\nRECORD\nRECURSIVE\nREDUCE\nREF\nREFERENCE\nREFERENCES\nREFERENCING\nREGEXP\nREGION\nREINDEX\nRELATIVE\nRELEASE\nREMAINDER\nRENAME\nREPEAT\nREPLACE\nREQUEST\nRESET\nRESIGNAL\nRESOURCE\nRESPONSE\nRESTORE\nRESTRICT\nRESULT\nRETURN\nRETURNING\nRETURNS\nREVERSE\nREVOKE\nRIGHT\nROLE\nROLES\nROLLBACK\nROLLUP\nROUTINE\nROW\nROWS\nRULE\nRULES\nSAMPLE\nSATISFIES\nSAVE\nSAVEPOINT\nSCAN\nSCHEMA\nSCOPE\nSCROLL\nSEARCH\nSECOND\nSECTION\nSEGMENT\nSEGMENTS\nSELECT\nSELF\nSEMI\nSENSITIVE\nSEPARATE\nSEQUENCE\nSERIALIZABLE\nSESSION\nSET\nSETS\nSHARD\nSHARE\nSHARED\nSHORT\nSHOW\nSIGNAL\nSIMILAR\nSIZE\nSKEWED\nSMALLINT\nSNAPSHOT\nSOME\nSOURCE\nSPACE\nSPACES\nSPARSE\nSPECIFIC\nSPECIFICTYPE\nSPLIT\nSQL\nSQLCODE\nSQLERROR\nSQLEXCEPTION\nSQLSTATE\nSQLWARNING\nSTART\nSTATE\nSTATIC\nSTATUS\nSTORAGE\nSTORE\nSTORED\nSTREAM\nSTRING\nSTRUCT\nSTYLE\nSUB\nSUBMULTISET\nSUBPARTITION\nSUBSTRING\nSUBTYPE\nSUM\nSUPER\nSYMMETRIC\nSYNONYM\nSYSTEM\nTABLE\nTABLESAMPLE\nTEMP\nTEMPORARY\nTERMINATED\nTEXT\nTHAN\nTHEN\nTHROUGHPUT\nTIME\nTIMESTAMP\nTIMEZONE\nTINYINT\nTO\nTOKEN\nTOTAL\nTOUCH\nTRAILING\nTRANSACTION\nTRANSFORM\nTRANSLATE\nTRANSLATION\nTREAT\nTRIGGER\nTRIM\nTRUE\nTRUNCATE\nTTL\nTUPLE\nTYPE\nUNDER\nUNDO\nUNION\nUNIQUE\nUNIT\nUNKNOWN\nUNLOGGED\nUNNEST\nUNPROCESSED\nUNSIGNED\nUNTIL\nUPDATE\nUPPER\nURL\nUSAGE\nUSE\nUSER\nUSERS\nUSING\nUUID\nVACUUM\nVALUE\nVALUED\nVALUES\nVARCHAR\nVARIABLE\nVARIANCE\nVARINT\nVARYING\nVIEW\nVIEWS\nVIRTUAL\nVOID\nWAIT\nWHEN\nWHENEVER\nWHERE\nWHILE\nWINDOW\nWITH\nWITHIN\nWITHOUT\nWORK\nWRAPPED\nWRITE\nYEAR\nZONE "},"aws/services/EBS":{"title":"EBS","links":["EC2"],"tags":["ebs","storage","storage/block"],"content":"Amazon Elastic Block Store (Amazon EBS) provides scalable, high-performance block storage resources that can be used with Amazon EC2 instances.\nEBS Features\n\nStorage resources\n\nEBS Volumes\nEBS snapshots\n\n\n"},"aws/services/EC2":{"title":"EC2","links":["CloudFormation","IAM","tags/role","tags/policy","EBS","EFS","S3","tags/cache","tags/az"],"tags":["ec2","role","policy","cache","az"],"content":"EC2 Features\n\nInstance\n\nInstance generations\n\nGeneral purpose\n\nM\nT\n\n\nCompute optimized\n\nC\n\n\nMemory optimized\n\nR\nU\nX\n\n\nStorage optimized\n\nD\nH\nI\n\n\nAccelerated computing\n\nDL\nF\nG\nGr\nInf\nP\nTrn\nVT\n\n\nHigh-perforance computing\n\nHpc\n\n\n\n\nInstance types\n\nCan be found by:\n\nAWS Console\nAWS CLI\n\n\n\n\nAttributes\n\nAvailability types üîó\nvCPUs or Cores\nMemory GiB\nNetwork performance\nLocal instance storage\n\n\nFleet Instances\n\nAvailable only  with\n\nEC2 API üîó\nAWS CLI üîó\nAWS SDK üîó\nAWS CloudFormation üîó\n\n\nEach fleet can be defined in only one region.\n\n\nMetadata\n\nüìå The URL is http://169.254.169.254/latest/\n\ndynamic\nmeta-data/\n\nami-id\nami-launch-index\nami-manifest-path\nblock-device-mapping/\nhostname\niam/\n\nsecurity-credentials/\n\nMyEC2Role\n\nreturns short-lived credentials through IAM role\n\n\n\n\n\n\ninstance-action\ninstance-id\ninstance-type\nlocal-hostname\nlocal-ipv4\nmac\nmetrics/\nnetwork/\nplacement/\nprofile\npublic-hostname\npublic-ipv4\npublic-keys/\nreservation-id\nsecurity-groups\nservices/\n\n\n`√πser-data\n\n\n‚úÖ We can get IAMrole name\n‚ùå We cannot get retrieve IAMpolicy\n\n\n\n\nStorage\n\nStorage options\n\nEBS\n\nMultiple EBS volumes can be attached to an instance.\nPersists independently from the life of its associated instance.\n\n\nInstance store\n\nTemporary block-level storage for instances.\nThe data on an instance store volume persists only during the life of the associated instance; if you stop, hibernate, or terminate an instance, any data on instance store volumes is lost.\n\n\nEFS\n\nNot support on Windows\nUse an EFS file system as a common data source for workloads and applications running on multiple instances.\n\n\nS3\n\nEC2 uses Amazon S3 to store EBS snapshots and instance store-backed AMIs.\n\n\nFSx\n\nAmazon FSx is a fully-managed service that supports a wide range of workloads. You can choose between these widely-used file systems: Lustre, NetApp ONTAP, OpenZFS, and Windows File Server.\n\n\nAmazon File Cache\n\nFully managed, high-speedcache on AWS that‚Äôs used to process file data, regardless of where the data is stored.\n\n\n\n\nRoot device type\n\nEBS\nINSTANCE-STORE\n\n\nRAID (Redundant Array of Independent Disks)\n\nVirtualization technology that combines multiple disk drives into a single logical unit to improve performance, redundancy, or both.\nRAID Levels\n\nRAID 0 (Striping)\n\nIncrease performance\n\n\nRAID 1(Mirroring)\n\nProvides redundancy\n\n\nRAID 5 (Striping with Parity)\n\nBalances performance and redundancy\n\n\nRAID 10 (RAID 1+0)\n\nCombines the benefits of RAID 0 and RAID 1.\n\n\n\n\n\n\n\n\n\nEC2 Auto Scaling üîó\n\nHelps you ensure that you have the correct number of EC2 instances available to handle the load for your application.\nThe collection of EC2 instances are called Auto Scaling Group.\nMinimum and Maximum number of instances can be defined.\nMultipleaz is available and evenly distributed to them.\nIf group includes spot instances, instances are automatically replaced with spot instances.\n"},"aws/services/ECS":{"title":"ECS","links":["tags/role","tags/iam"],"tags":["ecs","container","role","iam"],"content":"ECS Features\n\nECS Instance\n\nInstances are deregistered\n\nManually if the instance in the STOPPED state.\nAutomatically if the instance is the RUNNING state.\n\n\n\n\nECS Roles\n\nContainer instance role\n\nAllows ECS container agent running in instances to call ECS API on our behalf. It attaches  ecsInstanceRolerole\n\n\nTask execution role üîó‚Ä¨\nTask role üîó\n\n\nTasks\n\nParameters which are defined in a task:\n\nDocker image to use with each container in a task.\nCPU and memory allocation\nLaunch type to use\n\nEC2\nFargate\n\n\nLogging configuration\n\nbridge\nhost\nawsvpc\nnone\n\n\nVolumes that should be mounted\nTask executioniam role\n\n\n\n\nTask placement strategies üîó\n\nbinpack\n\nPlaces tasks on a few instaces as possible.\nPlace tasks based on the least available amount of CPU or memory. This minimizes the number of instances in use.\n\n\nrandom\n\nPlace tasks randomly.\nNo config is required\n\n\nspread\n\nMaximize availability\nPlace tasks evenly based on the specified value.\nAccepted values are attribute key-value pairs,¬†instanceId, or¬†host.\n\n\n\n\n\nSample Task Definitions\nFargate\n{\n    &quot;family&quot;: &quot;sample-fargate&quot;, \n    &quot;networkMode&quot;: &quot;awsvpc&quot;, \n    &quot;containerDefinitions&quot;: [\n        {\n            &quot;name&quot;: &quot;fargate-app&quot;, \n            &quot;image&quot;: &quot;public.ecr.aws/docker/library/httpd:latest&quot;, \n            &quot;portMappings&quot;: [\n                {\n                    &quot;containerPort&quot;: 80, \n                    &quot;hostPort&quot;: 80, \n                    &quot;protocol&quot;: &quot;tcp&quot;\n                }\n            ], \n            &quot;essential&quot;: true, \n            &quot;entryPoint&quot;: [\n                &quot;sh&quot;,\n\t\t&quot;-c&quot;\n            ], \n            &quot;command&quot;: [\n                &quot;/bin/sh -c \\&quot;echo &#039;&lt;html&gt; &lt;head&gt; &lt;title&gt;Amazon ECS Sample App&lt;/title&gt; &lt;style&gt;body {margin-top: 40px; background-color: #333;} &lt;/style&gt; &lt;/head&gt;&lt;body&gt; &lt;div style=color:white;text-align:center&gt; &lt;h1&gt;Amazon ECS Sample App&lt;/h1&gt; &lt;h2&gt;Congratulations!&lt;/h2&gt; &lt;p&gt;Your application is now running on a container in Amazon ECS.&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&#039; &gt;  /usr/local/apache2/htdocs/index.html &amp;&amp; httpd-foreground\\&quot;&quot;\n            ]\n        }\n    ], \n    &quot;requiresCompatibilities&quot;: [\n        &quot;FARGATE&quot;\n    ], \n    &quot;cpu&quot;: &quot;256&quot;, \n    &quot;memory&quot;: &quot;512&quot;\n}"},"aws/services/EFS":{"title":"EFS","links":["EC2"],"tags":["efs","storage/file"],"content":"Elastic File System Features\n\nProvides a scalable, shared file system for use with EC2 instances\nStorage classes\n\nStandard\nInfrequent Access\nArchive\n\n\nPerformance modes\n\nGeneral Purpose mode\nMax I/O\n\n\nFile system types üîó\n\nRegional\nOne Zone\n\n\n"},"aws/services/EKS":{"title":"EKS","links":["EFS","S3"],"tags":["eks","container"],"content":"EKS Features\n\nRun in\n\nAWS cloud\nOn-premise\n\n\nAn EKS platform consists of two components:\n\nEKS control plane\nEKS node (registeres with the plane)\n\n\nStorage options\n\nElastic Block Storage\nEFS\nS3\n\n\n\n‚Ä¨\n‚Ä≠"},"aws/services/ElasticBeanstalk":{"title":"ElasticBeanstalk","links":["VPC","tags/canary-testing","tags/blue-green-deployment"],"tags":["elastic-beanstalk","canary-testing","blue-green-deployment"],"content":"ElasticBeanstalk Features\n\nStorage\n\nEBS Volumes\n\nBlock storage that is assigned to EC2 instance.\nEach volume can only be assigned to one instance.\n\n\n\n\nInstance Lifecycles\n\nPending\nTerminated\nStopping\nStopped\nShutting-down\nTerminated\n\n\n\nConfiturations\n\nConfigurations can be saved:\n\nElasticBeanstalk Console\nEB CLI\nAWS CLI\n\n\n\nConfiguration Changes üîó\n\nMany configuration changes can be applied to a running environment without replacing existing instances. For example, setting a health check URL triggers an environment update to modify the load balancer settings.\nChanges that modify launch configuration or VPC settings require terminating all instances.\nPolicies for configuration setting replacement:\n\n1Ô∏è‚É£ Rolling Updates: keeps minimum number of instances and serves traffic to them.\n\nRolling Based on Health (No single-instance environment)\nRolling Based on Time (No single-instance environment)\n\n\n2Ô∏è‚É£ Immutable Updates: ElasticBeanstalk launches a temporary Auto Scaling group outside of the environment with separate instances. After, those will be put behind load balancer. When new instances pass health checks, new instances are moved to environment‚Äôs Auto Scaling group and terminates the temporary group and old instances.\n3Ô∏è‚É£ Disabled: ElasticBeanstalk terminates the existing environment‚Äôs instances and replaces them with the new instances.\n\n\n\nDeployment Policies (DeploymentPolicy) üîó\n\nAll at Once:\n\nüçè Fastest\nüçé Involves a service interruption - downtime.\nRolling back requires a further All at Once update.\n\n\nRolling: (No single-instance environment)\n\nUpdate a few instance at a time, then move onto the next bucket.\nüçé Reduced capacity during deployment.\nüçè No additional cost.\nRolling back requires a further Rolling update.\n\n\nRolling with Additional Batch: (No single-instance environment)\n\nüçè Maintains full capacity.\nüçé Extra additional cost.\nüçé Longer deployment\nRolling back requires a further Rolling update.\n\n\nüçÉ Immutable:\n\nSpins up new instances in a new ASG, deploys version to these instances and then swaps.\nüçè Maintains full capacity.\nüçé High cost (double capacity)\nüçé Longest deployment\nüçÉ Preferred for mission critical production systems.\n\n\nüçÉ Traffic Splitting: (No single-instance environment)\n\nPerforms an immutable deployment.\nSplits the traffic between the old and the new deployment, enablescanary-testing\n\n\n\n\n\n                  \n                  Blue/Green Deployment \n                  \n                \n\nElasticBeanstalk also supportsblue-green-deployment . To do this, deploy the new version to a separate environment, and then swap the CNAMEs of the two environments to redirect traffic to the new version instantly.\n\n\nConfig Files\n\n.ebextensions folder: (Amazon Linux 1)\n\nfiles must have .config extension.\n\n\nProcfile\nBuildfile\nPlatform Hooks\n\nRolling Updates üîó\n.ebextensions/rolling-updates.config\noption_settings:\n  aws:elasticbeanstalk:command:\n    DeploymentPolicy: Rolling\n    BatchSizeType: Percentage\n    BatchSize: 25"},"aws/services/Elasticache":{"title":"Elasticache","links":["tags/database","tags/cache"],"tags":["elasticache","database","cache"],"content":"Elasticache Features\n\n\nCaching strategies\n\nCache-Aside (Lazy loading)\n\ninitial overhead due to cache miss for requested data.\nMost common strategy: application first checks cache,\n\ncache hit: for a given parameters, then return it.\ncache miss: querydatabase , populate the cache and return it.\n\n\n\n\nWrite-Through\n\nThecache is proactively updated immediately following the primary database update.\nWhen the primary database is updated, cache will also be updated.\nBetter performance due to large cache.\nInfrequently accessed data also written to the cachesha\n\n\nüçÉ A proper caching strategy includes effective use of both write-through and lazy loading of your data and setting an appropriate expiration for the data to keep it relevant and lean.\n\n\n"},"aws/services/EventBridge":{"title":"EventBridge","links":["tags/stream"],"tags":["event-bridge","stream"],"content":"EventBridge Features\n\nEventBridge delivers a near-real-timestream of system events that describe changes in Amazon Web Services resources.\n"},"aws/services/IAM":{"title":"IAM","links":["tags/arn","S3","KMS","Lambda"],"tags":["permission","role","policy","arn"],"content":"IAM Features\n\nIdentity Sources\n\nIdentity Center directory\nActive Directory\nExternal identity provider\n\n\n\nIAM Identity\ncan be an:\n\nIAM User\nIAM Role\nIAM Group\n\ndocs.aws.amazon.com/IAM/latest/UserGuide/id_groups.html\ndocs.aws.amazon.com/IAM/latest/UserGuide/id_users.html\ndocs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html\nIAM Roles\n\nAn IAM role can be assumed by AWS Services to perform actions on your behalf.\nIAM Roles are for:\n\nAWS Services\nExternal Users (IdP)\n\n\nIAM Roles use time-limited security credentials.\n\nIAM Groups\n\nThe policies attached to an IAM Group are inherited by the IAM users under it.\nIt‚Äôs possible to assign an IAM user to multiple groups.\nGroups cannot be nested.\n\nIAM Policy\n\nAn IAM identity cannot perform AWS actions without an IAM Policy attached to it unless the resource being accessed allows the IAM Identity to do so.\nAWS evaluates all explicit DENY requests first.\nResource-based policies are evaluated first.\n\ndocs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html‚Ä¨\nIAM Policy Types to Choose\n\nAWS Managed Policies\nCustomer-managed Policy\nInline Policy\n\nWhen you use an inline policy, the permissions in the policy cannot be inadvertently attached to the wrong principal entity.\nDoesn‚Äôt have its own ARN\nCan‚Äôt be referenced\n\n\n\nTypes of IAM Policies\n\nIdentity-based policies\nResource-based policies\nIAM permissions boundaries\nService Control Policies\nSession policies\nAccess Control Lists (ACLs)\n\nIAM Policy Structure\nIt is made up of two components:\n\nPolicy-wide information üåó\n\nVersion element\n\n\nStatement(s)\n\nüåó Statement ID (Sid)\n\nLabel purpose - useful for identification\n\n\nüåù Effect\n\nCan be only Allow or Deny\n\n\nüåù Action\n\nList of actions\nUse * grant access to all or subset of AWS operations:\n\nec2:DescribeInstance* grants also\n\nDescribeInstanceAttribute,\nDescribeInstances\nDescribeInstancesStatus\n\n\n\n\n\n\nüåù Resource (Identity-based)\n\nList of AWS resources to which the Action element is applied.\nUsearn if you need to be more restrictive.\nUse * to apply the Action to all resources.\n\n\nüåù Principal (Resource-based) üîó\n\nSpecifies whom can access it\n\n\nüåó Condition\n\nUseful for applying logic to a policy.\nSome conditions\n\nStringEquals\nStringNotEquals\nStringLike\nStringNotLike\nBool\nIpAddress\nNotIpAddress\nArnEquals\nArnNotEquals\nNull: check if key is present\n\n\nWe can add IfExist to any condition above (except Null condition)\n\nStringLikeIfExists\n\n\n\n\n\n\n\ndocs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-policy-structure.html\naws.amazon.com/blogs/security/back-to-school-understanding-the-iam-policy-grammar/\nIdentity-based Policy vs. Resource-based Policy\n\nIdentity-based Policies\n\nDefines what an IAM Identity can do\nCan be attached to an IAM Identity\n\nIAM User\nIAM Group\nIAM Role\n\n\n\n\nResource-based policies\n\nDefines who can access that resource\nCan be attached to AWS resources\n\nS3 (bucket policy)\nKMS (key policy)\nLambda function\n\n\n\n\n\ndocs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html‚Ä¨\nPolicy Examples\nIdentity-based Policy\n{\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\n    &quot;Statement&quot;: [\n        {\n            &quot;Sid&quot;: &quot;AllowFullEC2AccessFromMyNetwork&quot;,\n            &quot;Effect&quot;: &quot;Allow&quot;,\n            &quot;Action&quot;: [\n                &quot;ec2:DescribeInstance*&quot;\n            ],\n            &quot;Resource&quot;: &quot;*&quot;,\n            &quot;Condition&quot;: {\n                &quot;IpAddress&quot;: {\n                    &quot;aws:SourceIp&quot;: &quot;180.0.111.0/24&quot;\n                }\n            }\n        }\n    ]\n}\nResource-based Policy\n{\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\n    &quot;Statement&quot;: [\n        {\n            &quot;Effect&quot;: &quot;Allow&quot;,\n            &quot;Principal&quot;: {\n                &quot;AWS&quot;: &quot;arn:aws:iam::123456789000:user/john&quot;\n            },\n            &quot;Action&quot;: [\n                &quot;s3:GetObject&quot;,\n                &quot;s3:GetObjectVersion&quot;\n            ],\n            &quot;Resource&quot;: [\n                &quot;arn:aws:s3:::tdojo/john-folder&quot;\n            ]\n        },\n        {\n            &quot;Effect&quot;: &quot;Allow&quot;,\n            &quot;Principal&quot;: {\n                &quot;AWS&quot;: &quot;arn:aws:iam::123456789000:user/dave&quot;\n            },\n            &quot;Action&quot;: [\n                &quot;s3:GetObject&quot;,\n                &quot;s3:GetObjectVersion&quot;\n            ],\n \n&quot;Res\nCross-account Access\nIf a user U from account A needs to access resource X from account B:\n\nAccount B must attach a resource-based policy to X that defines user X as a Principal.\nAccount A must attach an Identity-based policy to user U that defines X as a Resource\n\nIAM Roles\nIAM:PassRole\nPassRole is a special type of IAM permission that permits a user to associate IAM roles to an AWS resource. This is a simple yet powerful permission that warrants due scrutiny when constructing IAM Policies.\nScenario\nFor example:\n\nUser U has permissions to access resource A, but not B.\nResource A has permissions to execute on resource B.\nIf we:\nAttach iam:PassRole action to user U\nThen:\nUser U can access to resource B.\n\n{\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\n    &quot;Statement&quot;: [\n        {\n            &quot;Effect&quot;: &quot;Allow&quot;,\n            &quot;Action&quot;: &quot;iam:PassRole&quot;,\n            &quot;Resource&quot;: &quot;*&quot;\n        }\n    ]\n}\ndocs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_passrole.html‚Ä¨\ndocs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_iam-passrole-service.html‚Ä¨\nRole-Based Access Control\nThis method simplifies the management of access controls by grouping permissions based on roles rather than managing permissions for each individual user.\n\nCan be allocated to anyone including groups or services.\ndocs.aws.amazon.com/prescriptive-guidance/latest/saas-multitenant-api-access-authorization/access-control-types.html\n\n‚Ä≠"},"aws/services/KMS":{"title":"KMS","links":["tags/encryption","tags/plaintext"],"tags":["kms","encryption","plaintext"],"content":"KMS Features üîó\n\nProtect your master keys by storing and managing them securely\nEnvelope encryption is the practice of encrypting plaintext data with a data key, and then encrypting the data key under another key.\nKMS keys are protected by hardware security modules (HSMs).\nCan be integrated with AWS CloudTrail to log the use of your KMS keys for\n\nAuditing\nRegulatory and compliance needs.\n\n\nüîê To encrypt data locally\n\n1Ô∏è‚É£ Use the GenerateDataKey operation to get a dataencryption key.\n2Ô∏è‚É£ Use theplaintext data key (returned in the Plaintext field of the response) to encrypt data locally, then erase the plaintext data key from memory.\n3Ô∏è‚É£ Store the encrypted data key (returned in the CiphertextBlob field of the response) alongside the locally encrypted data.\n\n\nüîë To decrypt data locally:\n\n1Ô∏è‚É£ Use the Decrypt operation to decrypt the encrypted data key. The operation returns a plaintext copy of the data key.\n2Ô∏è‚É£ Use the plaintext data key to decrypt data locally, then erase the plaintext data key from memory.\n\n\n‚Äì Create symmetric and asymmetric keys where the key material is only ever used within the service\n‚Äì Create symmetric keys where the key material is generated and used within a custom key store under your control.\n‚Äì Import your own symmetric key for use within the service.\n‚Äì Create both symmetric and asymmetric data key pairs for local use within your applications.\n‚Äì Define which IAM users and roles can manage keys.\n‚Äì Define which IAM users and roles can use keys to encrypt and decrypt data.\n‚Äì Choose to have keys that were generated by the service to be automatically rotated on an annual basis.\n‚Äì Temporarily disable keys so they cannot be used by anyone.\n‚Äì Re-enable disabled keys.\n‚Äì Schedule the deletion of keys that you no longer use.\n‚Äì Audit the use of keys by inspecting logs in AWS CloudTrail.\nKey states:\n\nEnabled\nDisabled\nPendingDeletion\nPendingImport (Only for imported keys)\n\n\n\nSources\n\nAWS Database Encryption SDK\n"},"aws/services/Kinesis":{"title":"Kinesis","links":["CloudWatch","S3"],"tags":["kinesis","stream"],"content":"Kinesis Features\n\nNumber of consumer instances does not exceed the number of shards.\nAmazon Kinesis Data Streams limits of 5 GetRecords calls per second.\nüçÉ We recommend polling each shard one time per second per application.\nMonitoring\n\nThe metrics collected for streams are pushed to CloudWatch every minute. Archived 2 weeks.\nMonitoring types:\n\nBasic (stream-level)\n\nStream-level data is sent automatically every minute at no charge.\n\n\nEnhanced (shard-level)\n\nShard-level data is sent every minute for an additional cost. Must be specifically enabled.\n\n\n\n\n\n\n\nA stream is composed of one or more shards, each of which provides a fixed unit of capacity. The total capacity of the stream is the sum of the capacities of its shards. The Kinesis Client Library (KCL) ensures that for every shard there is a record processor running and processing that shard.\nCustom Consumers with Dedicated Throughput (Enhanced Fan-Out) üîó\n\nEnables consumers to receive records from a stream with throughput of up to 2 MB of data per second per shard.\nKinesis Data Streams pushes data records from the stream to consumers that use enhanced fan-out.  (don‚Äôt need to poll for data)\n\nHandling Duplication\n\nReasons for delivering multiple times:\n\nProducer retries\nConsumer retries\n\n\nHandling duplication\n\nThe number of duplicates due to producer retries is usually low compared to the number of duplicates due to consumer retries.\nProducer retries\n\nEmbed primary key within the record to remove duplicates.\n\n\nConsumer retries\n\nRecord Processor uses a fixed number of records per Amazon S3 file, such as 5000.\nThe file name uses this schema: Amazon S3 prefix, shard-id, and First-Sequence-Num. In this case, it could be something like sample-shard000001-10001\nAfter you upload the Amazon S3 file, checkpoint by specifying Last-Sequence-Num. In this case, you would checkpoint at record number 15000.\n\n\n\n\n"},"aws/services/Lambda":{"title":"Lambda","links":["tags/timeout","IAM","API-Gateway","Cognito","S3","CloudWatch","CodeCommit","CloudFormation","SQS","tags/arn","tags/http-status-code","tags/concurrency","tags/vpc","tags/alias","tags/lambda-layers"],"tags":["lamda","timeout","arn","http-status-code","concurrency","vpc","alias","lambda-layers"],"content":"Lambda Features\n\nMemory\n\nIt scales proportinally to the CPU power.\nIt can range from 128 MB to 10240 MB in 1 MB increments.\n\n\nTimeout\n\nThe defaulttimeout is 3 seconds\nMaximumtimeout value of 900 seconds\n\n\nInvocation ways\n\nAWS Lambda Console\nAPI/CLI command\nThe URL of Lambda function\n\nAuth types\n\nNONE\nAWS IAM\n\n\n\n\n\n\nTriggered by (AWS Services)\n\nDynamoDB\nKinesis\nSQS\nApplication Load Balancer\nAPI Gateway\nAlexa\nCloudFront\nS3\nSNS\nSES\nCloudFormation\nCloudWatch\nCodeCommit\nCodePipeline\n\n\nServices that don‚Äôt invoke lambda functions\n\nStream or queue-based resources\n\nDynamoDB streams\nSQS queues\nKinesis Data Streams‚Ä¨\n\n\n\n\nSupported languages\n\nNode.js\nJava\nPython\nC#\nGo\n\n\nExecution environment lifecycles\n\nINIT\nINVOKE\nSHUTDOWN\n\n\n\nInvocation types\n\nSynchronous Invocation\n\nCan accept a payload of up to 6 MB\nNeed a retry logic to handle intermittent errors.\nServices that invoke Lambda functions synchronously\n\nAPI Gateway\nApplication Load Balancer\nCognito\nData Firehose\nCloudfront (Lambda@Edge)\n\n\n\n\nAsynchronous Invocation\n\nCan accept to a payload of up to 256 KB\nAWS stores the event in an internal queue\nUse cases\n\nLong-latency processes that run in the background\nBatch Operations\nVideo Encoding\nOrder processing\n\n\nServices that invoke Lambda functions asynchronously\n\nAPI Gateway by specifying Event in the  X-AMZ-Invocation-Type request header.\nS3\nCloudWatch\nEventBridge\nCodeCommit\nCloudFormation\nAWS Config\n\n\n\n\n\nDestinations\n\nDestination Options\n\nSource\n\nAsynchronous invocation\nEvent source mapping invocation\n\n\nCondition\n\nOn failure\nOn success\n\n\nDestination type\n\nSNS topic\nSQS Queue\nLambda function\nEventBridge event bus\n\n\nDestination\n\narn\n\n\n\n\n\nExample CLI Invocation\nSynchronous Invocation\naws lambda invoke \\\n    --function-name testFunction \\\n    --invocation-type RequestResponse \\\n    --cli-binary-format raw-in-base64-out \\\n    --payload &#039;{&quot;input&quot;: &quot;input_value&quot;}&#039; response.json\nAsynchronous Invocation\n aws lambda invoke \\\n--function-name testFunction \\\n--invocation-type Event \\\n--cli-binary-format raw-in-base64-out \\\n--payload &#039;{&quot;input&quot;:&quot;input_value&quot;}&#039; response.json\n \n‚Ä¨\ndocs.aws.amazon.com/lambda/latest/dg/lambda-invocation.html‚Ä≠\naws.amazon.com/blogs/architecture/understanding-the-different-ways-to-invoke-lambda-functions/‚Ä¨\nEvent source mappings\nAn event source mapping is a sort of polling agent that Lambda manages.\n\nInvokes a lambda function synchronously if:\n\nThe batch size is reached\nThe maximum batching window is reached\n\n\n\n\nDeployment\n\nYou can upload a zip file directly to the console\nYou can upload a zip file to S3, and Lambda can download it from there\nYou can paste code directly to the console\n\nDeploying Code with External Dependencies\n\nüçÇ Zip the local code and deploy to AWS Lambda\n\nDeploying multiple Lambda functions that have the same dependencies is inefficient\nSteps\n\nInstall all external dependencies\nCreate a deployment package in zip format.\nUpload to AWS Lambda\n\n\n\n\nüçÉ Lambda Layers\n\nLambda Layers lets you store any additional code separately from your deployment package\nLambda layers can be shared among Lambda functions\nLike a deployment package, external dependencies must be in zip format before being uploaded to AWS Lambda\n\n\n\ndocs.aws.amazon.com/serverlessrepo/latest/devguide/sharing-lambda-layers.html\naws.amazon.com/blogs/aws/new-for-aws-lambda-use-any-programming-language-and-share-common-components\n\nConcurrency and Throttling\n\n1000 unreserved concurrent executions across all Lambda functions for every region per account. (Can be increased by contacting AWS Support)\nWhen distributing concurrencies, unreserved count can not be less than 100. In other words, reserved concurrent execution is limited to 900.\nReturns 429http-status-code\n\nA function reaches its reserved conccurrency limit\nA function reaches unreserved concurrency limit of the account\nWhen computingconcurrency limit for a Lambda function consider:\n\nExecution time\nNumber of requests handled per second\nCalculations differ for Poll-based event sources and push-based\n\n\n\n\n\nExample Scenario\nLambda function\n\nprocesses HTTP requests from API Gateway with unreserved concurrency\nExpects an average execution time of 10 seconds\nExpects 150 requests per second.\nAt is can be seen from below, after 6th second, many requests will sart to fail.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSecond12345678910Request15015015015015015015015015010Functions1503004506007509001050120013501500\ndocs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html\naws.amazon.com/blogs/compute/managing-aws-lambda-function-concurrency/\n\nConnections to a VPC\n\nLambda functions live in an isolated and secured VPC managed by AWS\nLambda function can interact with resources inside a private subnet by\n\nShould have AWSLambdaVPCAccessExecutionRole permission (creation and deletion of Elastic Network Interface)\n\n\nEven if Lambda function is connected to public subnet,vpc still be unable to route traffic between Lambda function and the internet. To fix this:\n\nCreate a NAT Gateway in public subnet in the VPC\nAdd entry to private subnet‚Äôs route table.\n\nDestination: 0.0.0.0/0\nTarget: NAT Gateway\n\n\n\n\n\naws.amazon.com/premiumsupport/knowledge-center/internet-access-lambda-function\ndocs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html\n\nVersion and Aliases üîó\n\nAWS Lambda assigns version numbers monotonically which means version number always increases even if it is deleted.\nUnpublished version is referred as $LATEST.\nFunction uses $LATEST if the version is not specified.\nWhen you publish a new version, a :version-number suffix is appended to your function‚Äôsarn, which indicates its version, (1)\n\narn:aws:lambda:us-east-2:123456789123:function:cool-function‚Ä¨‚Ä≠:1‚Ä¨\n\n\nInvoke a function with analias is possible.\n\nAppend :alias-name suffix to the functionarn\nEveryalias has its own uniquearn\n\n\n\ndocs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html\ndocs.aws.amazon.com/lambda/latest/dg/configuration-versions.html\n\n¬†\nLambda Layers\nThe paths for different runtimes oflambda-layers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRuntimePathNode.jsnodejs/node_modulesnodejs/node16/node_modules (NODE_PATH)nodejs/node18/node_modules (NODE_PATH)nodejs/node20/node_modules (NODE_PATH)Pythonpythonpython/lib/python3.x/site-packages (site directories)Javajava/lib (CLASSPATH)Rubyruby/gems/3.2.0 (GEM_PATH)ruby/lib (RUBYLIB)All runtimesbin (PATH)lib (LD_LIBRARY_PATH)docs.aws.amazon.com/lambda/latest/dg/packaging-layers.html#packaging-layers-paths"},"aws/services/Load-Balancer":{"title":"Load Balancer","links":["tags/security-group","tags/ip","Lambda","tags/dns"],"tags":["load-balancer","network","security-group","ip","dns"],"content":"Load Balancer Features\n\nLoad Balancers\n\nApplication Load Balancer\n\nAllows to select up to 5security-group .\nAWS assignedip address.\nCan be target Lambda in Target Group section.\nAllows multi-value headers.\n\nE.g. for query string ?name=foo&amp;name=bar\n\nIt returns ‚Äòname‚Äô: [‚Äòfoo‚Äô, ‚Äòbar‚Äô]\n\n\n\n\nProtocols\n\n‚úÖ HTTP (HyperText Transfer Protocol):\n\nSupports standard web traffic over port 80.\nCommonly used for serving web content, APIs, and other HTTP traffic.\n\n\n‚úÖ HTTPS (HyperText Transfer Protocol Secure):\n\nSupports secure web traffic over port 443 using SSL/TLS encryption.\nUsed for secure websites, APIs, and other encrypted communications.\n\n\n‚úÖ WebSocket:\n\nSupports full-duplex communication channels over a single TCP connection.\nUseful for real-time applications such as chat applications, live data feeds, etc.\nWorks over both HTTP and HTTPS.\n\n\n‚ùåUDP (User Datagram Protocol):\n\nNot supported by Application Load Balancers. UDP is typically used for low-latency and loss-tolerant connections, such as DNS, video streaming, and online gaming.\n\n\n\n\n\n\nNetwork Load Balancer\n\nAWS assignedip address and Elasticip address\nProtocols\n\n‚úÖTCP (Transmission Control Protocol):\n\nNLB supports TCP traffic, making it suitable for applications that require reliable, ordered, and error-checked delivery of a stream of bytes.\n\n\n‚úÖUDP (User Datagram Protocol):\n\nNLB supports UDP traffic, which is ideal for applications that require low-latency, connectionless communication, such asdns queries, video streaming, and online gaming.\n\n\n\n\n\n\n\n\n"},"aws/services/Load-Balancers":{"title":"Load Balancers","links":[],"tags":[],"content":""},"aws/services/RDS":{"title":"RDS","links":[],"tags":["rds","database"],"content":"RDS Features"},"aws/services/S3":{"title":"S3","links":["Lambda","SNS","SQS","EventBridge"],"tags":["s3","object-storage"],"content":"S3 Features\n\nFiltering objects with prefix and suffix\nS3 Object Lambda\n\nEnables to process data with custom code\nUse cases:\n\nRedact Persoanlly Identifiable Information (PII)\nAugment data from other services\nWatermarking images on the fly\nCompressing or decompressing files as being downloaded\nConverting across data formats\n\n\n\n\nStorage Classes\n\nStandard\nStandard-Infrequent Access (IA)\n\nMinimum 30 days charge\n\n\nOne Zone-Infrequent Access (99.5 Availability)\nIntelligent Tiering\nGlacier Instant Retrieval (Minimum 90 days charge)\n\nLong-lived data\nRetrieval in miliseconds\nSuitable for accessing a few times in a year.\n\n\nGlacier Flexible Retrieval (Minimum 90 days charge)\n\nLong-term data\nRetrieval in minutes to hours\nTypes of Archive Retrievals\n\nStandard\n- Retrieval: 3 - 5 hours\nExpedited\n\nUrgent case\nExpensive\nRetrieval: 1 - 5 minutes\nCan not exceed 250 MB\n\n\nBulk\n\nFree\nRetrieval: 5 - 12 hours\n\n\n\n\n\n\nGlacier Deep Archive (Minimum 180 days charge)\n\nThe cheapest\nSuitable for long retention periods, like 10 years\nTypes of Archive Retrievals\n\nStandard\n\nRetrieval: 12 hours\n\n\nExtended/Bulk\n\nRetrieval: 48 hours\n\n\n\n\n\n\n\n\nEncryption types\n\nSSE-KMS\n\nEnforce x-amz-server-side-encryption header with aws:kms value.\nCan be encrypted with\n\nAWS-managed KMSkey\nCustomer-managed KMS key\n\nAdd kms:GenerateDataKey and kms:Decrypt policies\n\n\n\n\n\n\nSSE-S3\n\nDenies with requests that do not include x-amz-server-side-encryption header with AES256 as the value.\n\n\nSSE-C (Customer-provided enc key)\n\nOnly accepts AES-256\nEnc key must be provided along with the data\nReject HTTP requests\nheaders must include one of them\n\n x-amz-server-side-encryption-customer-algorithm‚Ä¨\n x-amz-server-side-encryption-customer-key\n x-amz-server-side-encryption-customer-key-MD5‚Ä¨\n\n\n\n\nClient-side Encryption\n\nClient is responsible for encryption/decryption\n\n\n\n\nNotifications\n\nDestinations\n\nLambda function\nSNS topic\nSQS queue\n\n\nTriggered by\n\nAll events can be send to EventBridge\nObject creation\nObject deletion\nObject ACL PUT events\nObject tagging events\nRestore object events\nReduced Redundancy Storage (RRS) object lost events\nReplication events\nS3 Lifescycle expiration events\nS3 Lifecycle transition events\nS3 Intelligent-Tiering automatic archival events\n\n\n\n\nACL\n\nPermissions\n\nREAD\nWRITE\nREAD_ACP\nWRITE_ACP\nFULL_CONTROL\n\n\n\n\n"},"aws/services/SAM":{"title":"SAM","links":["CloudFormation","tags/cli","Lambda","S3","DynamoDB"],"tags":["sam","serverless","cli"],"content":"AWS SAM Features\n\nAn extension of CloudFormation template.\nCLI commands:cli\n\nsam init\n\nInitializes a serverless application with an AWS SAM template.\nThe template provides a folder structure for your Lambda functions\nThe template is connected to an event source such as\n\nAPIs\nS3 buckets\nDynamoDB tables.\n\n\nThis application includes everything you need to get started\nEventually extend it into a production-scale application.\n\n\n**sam build\n\nBuilds any dependencies that your application has\nCopies your application source code to folders under¬†.aws-sam/build¬†to be zipped and uploaded to Lambda.\n\n\nsam deploy\n\nPerforms the functionality of¬†sam package.\nYou can use the¬†sam deploy¬†command to directly package and deploy your application.\n\n\n\n\n"},"aws/services/SNS":{"title":"SNS","links":["SQS","Lambda","tags/fifo"],"tags":["sns","fifo"],"content":"SNS Features\n\nPush based service\nAsynchronous\nEndpoints\n\nSQS\nLambda\nHTTP\nEmail\nMobile push notification\nSMS\n\n\nTopic Types\n\nStandard\nfifo\n\n\nDestinations\n\nEvent destinations\n\nA2A (application-to-application)\nA2P (application-to-person)\n\n\n\n\n"},"aws/services/SQS":{"title":"SQS","links":["S3","X-Ray","tags/deduplication"],"tags":["sqs","queue","deduplication"],"content":"SQS Features\n\nWhen requesting messages from a queue, you cannot specify individual messages. Instead, you determine the maximum number of messages you wish to retrieve, up to a limit of 10.\nMessage can contain up to 256 KB including the attributes.\nUse S3 for messages larger than 256 KB.\nDefault visibility of an SQS message is 30 seconds and max 12 hours.\nDelay Queue allows you to make messages invisible for 0 - 900 seconds.\nMessages are not automatically deleted. (Must be explicitly deleted)\nDebug SQS with X-Ray service.\n\nUse the¬†X-Amzn-Trace-Id\nUse the¬†AWSTraceHeader\n\n\nReceiptId is about who received it and it changes for different receivers.\nMessage attributes\n\nUse message attributes to attach custom metadata.\nAttributes\n\nName\nType\nValue\n\n\nSupported data types\n\nString, Number, Binary, Custom\n\n\n\n\nQueue types\n\nStandard queue\nFIFO queue\n\nFIFO queues follow exactly-once processing. It introduces a parameter called MessageDeduplicationID, which is the token used for deduplication of sent messages.\nAny messages sent with the same MessageDeduplicationID are accepted successfully but aren‚Äôt delivered during the 5 minutededuplication interval. SQS remembers the MessageDeduplicationId values it‚Äôs seen for at least five minutes, which means deduplication Ids can only reduce, not completely eliminate, the chances of duplication occurring.\nOptionally, you may enable ContentBasedDeduplication to let SQS create an SHA-256 hash based on the message body and use it as the value for MessageDeduplicationId.\n\n\n\n\n\nSQS Actions\n\nBatch Actions\n\nAllows to manipulate up to 10 messages.\nTotal size can not exceed 256 Kƒ∞B.\nCan be used\n\nQuery API\nAWS SDK\n\n\nActions\n\nSendMessageBatch\n\n\nDeleteMessageBatch\n\n\nChangeMessageVisibilityBatch\n\n\n\n\nSQS actions:\n\nAddPermission\nCancelMessageMoveTask\nChangeMessageVisibility\nChangeMessageVisibilityBatch\nCreateQueue\nDelete Message\nDeleteMessageBatch\nDeleteQueue\nGetQueueAttributes\nGetQueueUrl\nListDeadLetterSourceQueues\nListMessageMoveTasks\nListQueues\nListQueueTags\nPurgeQueue\nReceiveMessage\nRemovePermission\nSendMessage\nSendMessageBatch\nSetQueueAttributes\nStartMessageMoveTask\nTagQueue\nUntagQueue\n\n\n"},"aws/services/STS":{"title":"STS","links":["tags/http-status-code","IAM"],"tags":["sts","http-status-code"],"content":"STS Features\n\nAPI\n\nDecodeAuthorizationMessage\n\nDecodes additional information about the authorization status of a request from an encoded message returned in response to an AWS request.\nIf a user is not authorized to perform an operation that he or she has requested, the request returns a Client.UnauthorizedOperation response (a 403http-status-code  response).\nSome AWS operations additionally return an encoded message that can provide details about this authorization failure.\nThe message is encoded because the details of the authorization status can constitute privileged information that the user who requested the operation should not see. To decode an authorization status message, a user must be granted permissions via an IAM policy to request which must include sts:DecodeAuthorizationMessage action.\n\n\n\n\n"},"aws/services/Step-Functions":{"title":"Step Functions","links":["tags/workflow"],"tags":["step-functions","workflow","orchestration"],"content":"Step Function Concepts üîó\n\nWorkflow\n\nA sequence of steps\n\n\nStates üîó\n\nIndividual steps in your state machine that can make decisions based on the input\nPerform actions from those inputs, and pass output to other states.\nStates can perform a variety of functions in your state machine:\n\nDo some work in your state machine (a¬†Task¬†state)\nMake a choice between branches of execution (a¬†Choice¬†state)\nStop an execution with a failure or success (a¬†Fail¬†or¬†Succeed¬†state)\nPass its input to its output, or inject some fixed data into the workflow (a¬†Pass¬†state)\nProvide a delay for a certain amount of time, or until a specified date and time (a¬†Wait state)\nBegin parallel branches of execution (a¬†Parallel¬†state)\nDynamically iterate steps (a¬†Map¬†state)\n\n\n\n\n\n\nActions üîó\n\nStep Functions Features\n\nTypes ofworkflow s\n\nStandard workflow\n\nTasks and states are never run more than once, unless you have specified Retry behavior in ASL.\nüí∞ Billed according to the number of state transitions processed.\nUp to 1 year\nDurable and auditable.\nRerieve execution history up to 90 days with its API.\n\n\nExpress\n\nUp to 5 minutes\nIdeal for high-volume and event-processing workloads such as\n\nIoT data ingestion\nStreaming and tranformation of data processing\n\n\nüí∞ Billed by\n\nThe number of executions\nThe duration of execution\nThe memory consumed while the execution ran\n\n\n\n\n\n\nCan be used to build\n\nDistributed applications\nAutomate processes\nOrchestrate microservices\n\n\nAbility to\n\nCoordinate system activities\nRun business logic in a particular sequence\nHandle reprocessing of data if errors occur\n\n\n\nProvides a visual interface to the system, making it easy to update and change the workflow.\nVery low maintenance overhead.\n\nError Handling üîó\n\nWhen a state reports an error and either there is no Retry field, or if retries fail to resolve the error, Step Functions scans through the catchers in the order listed in the array.\nWhen the error name appears in the value of a catcher‚Äôs ErrorEquals field, the state machine transitions to the state named in the Next field.\nRetry:\n\nTask and Parallel states can have a field named Retry, whose value must be an array of objects known as retriers.\nAn individual retrier represents a certain number of retries, usually at increasing time intervals.\nA retrier contains the following fields:\n\nErrorEquals\n\nA non-empty array of strings that match error names. When a state reports an error, Step Functions scans through the retriers. When the error name appears in this array, it implements the retry policy described in this retrier.\n\n\nIntervalSeconds\n\nAn integer that represents the number of seconds before the first retry attempt.\nüìå (1 by default).\n\n\nMaxAttempts\n\nA positive integer that represents the maximum number of retry attempts\n\nüìå (3 by default).\n\n\nA value of 0 specifies that the error or errors are never retried.\nIf the error recurs more times than specified, retries cease and normal error handling resumes.\n\n\nBackoffRate\n\nThe multiplier by which the retry interval increases during each attempt\n\nüìå (2.0 by default)\n\n\n\n\n\n\n\n\nCatch:\n\nTask and Parallel states can have a field named¬†Catch.\nThis field‚Äôs value must be an array of objects, known as¬†catchers.\nA catcher contains the following fields.\n\nErrorEquals\nA non-empty array of strings that match error names, specified exactly as they are with the retrier field of the same name.\nNext\nA string that must exactly match one of the state machine‚Äôs state names.\nResultPath\nA path¬†that determines what input is sent to the state specified in the Next field.\n\n\n\n\n\nState Machine Structure\n\nüåóComment\n\nA human-readable description of the state machine.\n\n\nüåùStartAt\n\nA string that must exactly match (is case sensitive) the name of one of the state objects.\n\n\nüåóTimeoutSeconds\n\nThe maximum number of seconds an execution of the state machine can run. If it runs longer than the specified time, the execution fails with a¬†States.Timeout¬†Error Name.\n\n\nüåó Version\n\nThe version of the Amazon States Language used in the state machine (default is ‚Äú1.0‚Äù).\n\n\nüåùStates¬†\n\nAn object containing a comma-delimited set of states.\n\n\n\nExample State Language Specifications\n{\n  &quot;Comment&quot;: &quot;An example of the Amazon States Language using a choice state.&quot;,\n  &quot;StartAt&quot;: &quot;FirstState&quot;,\n  &quot;States&quot;: {\n    &quot;FirstState&quot;: {\n      &quot;Type&quot;: &quot;Task&quot;,\n      &quot;Resource&quot;: &quot;arn:aws:lambda:us-east-1:123456789012:function:FUNCTION_NAME&quot;,\n      &quot;Next&quot;: &quot;ChoiceState&quot;\n    },\n    &quot;ChoiceState&quot;: {\n      &quot;Type&quot; : &quot;Choice&quot;,\n      &quot;Choices&quot;: [\n        {\n          &quot;Variable&quot;: &quot;$.foo&quot;,\n          &quot;NumericEquals&quot;: 1,\n          &quot;Next&quot;: &quot;FirstMatchState&quot;\n        },\n        {\n          &quot;Variable&quot;: &quot;$.foo&quot;,\n          &quot;NumericEquals&quot;: 2,\n          &quot;Next&quot;: &quot;SecondMatchState&quot;\n        }\n      ],\n      &quot;Default&quot;: &quot;DefaultState&quot;\n    },\n \n    &quot;FirstMatchState&quot;: {\n      &quot;Type&quot; : &quot;Task&quot;,\n      &quot;Resource&quot;: &quot;arn:aws:lambda:us-east-1:123456789012:function:OnFirstMatch&quot;,\n      &quot;Next&quot;: &quot;NextState&quot;\n    },\n \n    &quot;SecondMatchState&quot;: {\n      &quot;Type&quot; : &quot;Task&quot;,\n      &quot;Resource&quot;: &quot;arn:aws:lambda:us-east-1:123456789012:function:OnSecondMatch&quot;,\n      &quot;Next&quot;: &quot;NextState&quot;\n    },\n \n    &quot;DefaultState&quot;: {\n      &quot;Type&quot;: &quot;Fail&quot;,\n      &quot;Error&quot;: &quot;DefaultStateError&quot;,\n      &quot;Cause&quot;: &quot;No Matches!&quot;\n    },\n \n    &quot;NextState&quot;: {\n      &quot;Type&quot;: &quot;Task&quot;,\n      &quot;Resource&quot;: &quot;arn:aws:lambda:us-east-1:123456789012:function:FUNCTION_NAME&quot;,\n      &quot;End&quot;: true\n    }\n  }\n}"},"aws/services/Systems-Manager":{"title":"Systems Manager","links":["EventBridge"],"tags":["systems-manager"],"content":"Application Management\nParameter Store\n\nParameter policies (Only Advanced tier):\n\nExpiration\n\nDeletes the parameter at a specific date\n\n\nExpirationNotification\n\nSends an event to Amazon EventBridge (Amazon CloudWatch Events) when the specified expiration time is reached.\n\n\nNoChangeNotification\n\nSends an event to Amazon EventBridge (Amazon CloudWatch Events) when a parameter has not been modified for a specified period of time.\n\n\n\n\nCan store\n\nPlain text\nEncrypted text\n\n\nReferencing\n\n{{ssm:parameter-name}}\nNo nested values\n\n\n\nNode Management\n\nAutomates the process of keeping your managed nodes and other services.\nSchedules the association checks.\nAn association includes three components:\n\nA document that defines the state\nTarget(s)\nA schedule\n\n\n"},"aws/services/VPC":{"title":"VPC","links":[],"tags":[],"content":""},"aws/services/X-Ray":{"title":"X-Ray","links":["tags/latency"],"tags":["x-ray","latency"],"content":"X-Ray Features\n\nX-Ray creates a map of services used by your application with trace data.\nYou can use the trace data to drill into specific services or issues.\nThis data provides a view of connections between services in your application and aggregated data for each service, including averagelatency and failure rates.\nCan be used to\n\nDetect bottlenecks\nVisualize distributed apps\n\n\nAPI\n\nGetTraceSummaries\n\nGet the list of trace IDs of the application.\nƒ∞ncludes ClientIp\n\n\nBatchGetTraces\n\nRetrieve the list of traces.\n\n\nGetGroup\n\nRetrieves the group resource details.\n\n\nGetServiceGraph\n\nShows which services process the incoming requests, including the downstream services that they call as a result.\n\n\nPutTraceSegments\n\nSend segment documents directly to X-Ray.\n\n\n\n\nSegments üîó\n\nA segment document can be contain\n\nA whole segment with subsegments.\nA fragment of a segment that indicates that a request is in progress.\nA single subsegment that is sent separately.\n\n\nCan be up to 64 kB.\nA trace segment is a JSON representation of a request that your application serves. A trace segment records information about the original request, information about the work that your application does locally, and subsegments with information about downstream calls that your application makes to AWS resources, HTTP APIs, and SQL databases.\n\n\nX-Ray Daemon\n\nListens for traffic on UDP port 2000\nCan be run:\n\nLocally\nOn-premise\nOn AWS Services\n\n\n\n\nAnnotations\n\nKey-value pairs that indexed for use with filter expressions.\nUse to group traces in the console when calling GetTraceSummaries.\n\n\nMetadata\n\nKey-value pairs that are not indexed for use with filter expressions.\n\n\nError categories\n\nError: Client errors 4xx\nFault: Server faults 5xx\nThrottle: Throttling errors 429\n\n\n"},"index":{"title":"index","links":["API-Gateway","CodeBuild","CodeCommit","CodeDeploy","CodePipeline","CloudFormation","CloudWatch","Cognito","DynamoDB","EC2","ECS","EFS","Elasticache","EventBridge","ElasticBeanstalk","IAM","Kinesis","KMS","Lambda","Load-Balancer","RDS","S3","SAM","SQS","SNS","Systems-Manager","Step-Functions","X-Ray"],"tags":[],"content":"Study Notes for AWS Developer Associate Exam\nI thought it would be nice to publish my study notes. It is easier to publish my notes with Obsidian Publish rather than publishing on blogging platforms.\nNotations\n\nüåù -‚áí Required\nüåó -‚áí Optional\nüçÇ -‚áí Less Preferrable\nüçÉ -‚áí Preferrable\n1Ô∏è‚É£ -‚áí Order Notation\nüìå -‚áí Default\n‚úÖ -‚áí Supported / Valid\n‚ùå -‚áí Not Supported / Not Valid\nüçè ‚áí Pro\nüçé -‚áí Con\n\nExam Topics\n\nAPI Gateway\nAWS CLI üîó\nCI/CD\n\nCodeBuild\nCodeCommit\nCodeDeploy\nCodePipeline\n\n\nCloudFormation\nCloudWatch\nCognito\nDynamoDB\nEC2\nECS\nEFS\nElasticache\nEventBridge\nElasticBeanstalk\nIAM\nKinesis\nKMS\nLambda\nLoad Balancer\n Aurora\nS3\nSAM\nSQS\nSNS\nSystems Manager\nStep Functions\nX-Ray\n\nTopics\nStorage Services\n\nS3\nEFS\n\nTO IMPLEMENT\n\nLoad balancer with headers\n\nLambda\nEC2\n\n\nAPI Gateway\n\nCache invalidation\nStages\n\n\nLambda\n\nState Machines\n\n\nKMS\n\nDecrypt\nEncrypt\n\n\nCodeCommit\n\nGit account\n\n\nSNS\n\nCreate an SNS topic\n\n\n\nTODOs\n\n DynamoDB\n\n DynamoDB query and scans\n Consumed Capacity &amp; API\n DynamoDB local and global secondary indexes\n\n pessimistic optimistic locking\n\n\n hot partitions\n\n\n CloudFormation stacks and test stacks\n\n Inline Code\n Helper scripts\n\n cfn-signal\n cfn-get-metadata\n cfn-init\n cfn-hup\n\n\n CLI\n\n create-stack\n create-stack-set\n deploy\n update-stack\n\n\n\n\n CloudWatch\n\n Namespace\n Dimension\n Alarm\n Event\n\n\n CodeCommit test\n CodeBuild test\n CodeDeploy\n\n Can deploy on-premise servers?\n Which port it communicates?\n AppSpec file sections\n AWS SDK for CodeDeploy\n\n Build case\n Deploy case\n\n\n\n\n Code Pipeline\n\n Manual approval\n\n\n X-Ray SDK\n\n How to view the full traces of their application without using the X-Ray console\n PutTraceSegments\n subsegments\n annotations\n tracing header\n metadata\n Which port X-Ray utilizes?\n which source will AWS X-Ray fetch the client IP address?\n IAM policies\n\n\n MessageDeduplicationId\n sam-cli\n Cognito\n\n Adaptive Authentication for the User Pool\n User pools and Identity pools\n\n\n EC\n\n EC2 Spot Fleet\n How to get public and private IP addresses from the instance?\n\n http://169.254.169.254/latest/meta-data/\n http://169.254.169.254/latest/userdata/\n\n\n Auto scaling\n\n\n ECS\n\n Live implementation\n Task definitions\n\n spread\n random\n binpack\n\n\n\n\n EFS\n\n shared persisted data\n\n\n EKS\n ElasticBeanstalk\n\n environment config file\n deployment types\n\n immutable\n rolling with additional batch\n all at once\n rolling\n\n\n Caching\n\n Lazy-loading\n Write through\n\n\n\n\n WAF\n IAM\n\n LDAP\n --profile\n\n\n API Gateway\n\n Proxy configs:\n HTTP_PROXY\n AWS_PROXY\n\n\n Kinesis Shards\n\n How to avoid deduplication\n Cold / Hot shards\n\n\n Amplify\n\n amplifyconfiguration.json\n aws-exports.js\n amplify.yml\n\n\n RDS\n\n How different process uses CPU , total memory etc.?\n Enhanced monitoring\n\n\n Systems Manager State Manager\n\n What is the purpose of this service?\n NoChangeNotification\n Difference between Secret Manager and Parameter store\n\n\n AWS Service Catalog and AWS Config\n Systems Manager Parameter Store\n SNS\n\n Fan-out pattern\n\n\n SQS\n\n Batch pattern\n\n\n\nResources\n\nTutorial Dojo‚Äôs AWS Cheat Sheet\n\n"},"services/API-Gateway":{"title":"API Gateway","links":["Lambda","EC2","ElasticBeanstalk","ECS","tags/timeout","Step-Functions","tags/http-header","tags/query-string","tags/base64","tags/ttl","IAM","tags/role"],"tags":["api-gateway","timeout","http-header","query-string","base64","ttl","role"],"content":"They are not used in API Gateway to determine which version of the API to route traffic to based on the request header.\nAPI Gateway Features\n\nFully managed service for RESTful APIs.\nBack-end service that are powered by\n\nAWS Lambda\nAWS EC2\nAWS ElasticBeanstalk\nAWS Elastic Container Service (ECS)\nAny web application\n\n\nAPI Gateway‚Äôs integrationtimeout is 29 seconds\nAPI Gateway Stage\n\nAPI Gateway Stage is a named reference to a deployment (a snapshot of the APl).\nUse a stage to manage and optimize a particular deployment.\nYou can configure stage settings to enable caching, customize request throttling, configure logging, define stage variables, or attach a canary release for testing.\n\n\nEnvironment Variables\n\nUsed to pass variables and parameters to a Lambda function.\n\n\n\n\n\n                  \n                  Warning\n                  \n                \n\nAPI Gateway is used to expose APls and route API requests to their correct destination. It is not used to build and manage complex business workflows for distributed systems. Otherwise, use Step Functions.\n\n\nRequest &amp; Response Flow\n\nA simple request-response flow\n\n1Ô∏è‚É£ Method Request\n\nDefineshttp-header\nClient request is validated\nAuthoriation can be set up in here\nValidate body for a Lambda function.\nDeclare any input body such asquery-string\n\n\n2Ô∏è‚É£ Integration Request\n\nThe section contains settings about\n\nHow API Gateway communicates with the backend\n\nLamda function\nHTTP endpoint\nMock\nAWS Service\nVPC Link\n\n\nIntegration type\n\nProxy\n\nClient request is transmitted as-is to the backend\n\n\nNon-proxy\n\nOption to use mapping templates to model the structure of the request daya that gets forwarded to the backend.\nChange data\n\n\n\n\n\n\n\n\n3Ô∏è‚É£üåù Integration Response (Only in Non-proxy)\n\nIntercepts the result before it is returned to the client\nMust configure at least one Integration Response\n\nDefault: Passthrough which returns the result as-is\n\n\nCan transform the response to another format likebase64\n\n\n4Ô∏è‚É£ Method Response\n\nDefineshttp-header the method can return\n\n\n\n\n\nAPI Types\n\nREST API\n\nComplete control on request-response flow\n\nCreate API Keys\nCaching\nUsagePlans\n\n\n\n\nHTTP API\n\nCheaper than REST API\nUse for simple applications\nLacks many API Gateway features\n\n\nWebSocket API\n\nUse for real-time applications\n\n\nSOAP (Support)\n\nPassthrough\nConvert XML to JSON\n\n\n\nMethods\n\nNon-proxy\n\nLambda function\nHTTP\nMock\nAWS Service\nVPC Link\n\n\nProxy\n\nLamda Proxy\nHTTP Proxy\n\n\n\ndocs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html\ndocs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-basic-concept.html\ndocs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-integration-types.html\n\nStage Variables\nAllows to use different Lambda versions by using stage variables as a placeholder.\ndocs.aws.amazon.com/apigateway/latest/developerguide/stage-variables.html\ndocs.aws.amazon.com/apigateway/latest/developerguide/canary-release.html\n\nCaching\n\nAPI Gateway doesn‚Äôt update the cache entries untilttl expires\nInvalidate by using &#039;Cache-Control&#039;: &#039;max-age=0&#039;\nIn order to invalidate cache by client\n\nCache-Control: max-age=0http-header must be sent.\n&quot;execute-api: InvalidateCache&quot; IAMrole must be granted.\n\n\n\n‚Ä≠\nUsage Plans\naws.amazon.com/blogs/aws/new-usage-plans-for-amazon-api-gateway/\ndocs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html"},"services/CDK":{"title":"CDK","links":[],"tags":["cdk"],"content":"Cloud Development Kit\n\nThe AWS CDK is an open-source framework that you can use to manage your AWS infrastructure using code.\nCDK consists of two parts:\n\nAWS CDK Contruction Library üîó\nAWS CDK Toolkit  üîó\n\n\nFiles and folders:\n\ncdk.json\n\nConfiguration file for the AWS CDK.\nThis file provides instruction to the AWS CDK CLI regarding how to run your app.\n\n\n\n\nCDK available in those languages:\n\nTypeScript\nJavaScript\nPython\nJava\nC#\nGo\n\n\n\nAWS CDK Concepts\n\nApps\n\nA collection of one or more CDK stacks.\nDoesn‚Äôt configure AWS resources on their own.\nProvide context for other constructs.\n\n\nStacks\n\nA collection of one or more constructs.\nDoesn‚Äôt configure AWS resources on their own.\nProvide context for other constructs.\n\n\nNode üîó\n"},"services/CloudFormation":{"title":"CloudFormation","links":["S3","EC2"],"tags":["cloudformation"],"content":"CloudFormation Features\n\nTemplates can be\n\nJSON\nYAML\n\n\nTakes template from S3  and creates an evironment\n\nConcepts\nStack üîó\n\nIndividual resources and treated as a single unit\nIf it fails during creation, it reverts to its last working state if it has. Otherwise, all resources are terminated.\ncreate-stack command creates a stack as specified in the template provided.\n\nCloudFormation Template üîó\n\nüåó AWSTemplateFormatVersion - lets you set the version of the template that you want to use, which determines the capabilities of the template. If you don‚Äôt assign a version, CloudFormation automatically assumes that you want to use the latest version.\nüåó Description - allows you to include comments about your template to help you better describe and add more details about your template.\nüåó Metadata - allows you to provide objects that provide details about the template or even implementation details of specific resources.\nüåù Resources - This is where you define all resources that you want to include in your stack.  AWS resources such as EC2 instance, Lambda function, S3 bucket are declared in the Resources section. Take note that the Resources section is the only REQUIRED section in a CloudFormation template. All other sections are optional.\nüåó Mappings - matches a key to a corresponding set of named values.\nüåó Parameters - when writing CloudFormation templates, it‚Äôs very unlikely to be hardcoding values such as AMI ID, security group ID, and so on. Parameters enable users to pass values dynamically based on their use case.\nüåó Conditions - defines conditions by using the intrinsic condition functions. These conditions determine when AWS CloudFormation creates the associated resources.\nüåó Transform - you can use this section to write templates in the AWS Serverless Application Model (AWS SAM) syntax. The syntax used in SAM is different from the standard CloudFormation template. Behind the scenes, CloudFormation converts and ‚Äòtransforms‚Äô the templates written under the Transform section into a regular CloudFormation template.\nüåóOutputs - Describes the values that are returned whenever you view your stack‚Äôs properties. For example, you can declare an output for an S3 bucket name and then call the describe-stacks AWS CLI command to view the name.\n\nLogical ID (also called logical name)\n\nAn identifier for the current output. The logical ID must be alphanumeric (a‚Äìz, A‚ÄìZ, 0‚Äì9) and unique within the template.\n\n\nDescription (optional)\n\nA String type that describes the output value. The value for the description declaration must be a literal string that‚Äôs between 0 and 1024 bytes in length. You can‚Äôt use a parameter or function to specify the description.\n\n\nValue (required)\n\nThe value of the property returned by the aws cloudformation describe-stacks command. The value of an output can include literals, parameter references, pseudo-parameters, a mapping value, or intrinsic functions.\n\n\nExport (optional)\n\nThe name of the resource output to be exported for a cross-stack reference.\n\n\n\n\n\nHelper Scripts üîó\nAWS CloudFormation provides the following Python helper scripts that you can use to install software and start services on an Amazon EC2 instance that you create as part of your stack:\n\nHelper scripts don‚Äôt require credentials\nHelper scripts\n\ncfn-init\n\nUse to retrieve and interpret resource metadata, install packages, create files, and start services.\n\n\ncfn-signal\n\nUse to signal with a CreationPolicy or WaitCondition, so you can synchronize other resources in the stack when the prerequisite resource or application is ready.\n\n\ncfn-get-metadata\n\nUse to retrieve metadata for a resource or path to a specific key.\n\n\ncfn-hup\n\nUse to check for updates to metadata and execute custom hooks when changes are detected.\n\n\n\n\n\n\n\n                  \n                  Warning\n                  \n                \n\nThe scripts aren‚Äôt executed by default. You must include calls in your template to execute specific helper scripts.\n\n\nCloudFormation Template Samples\nMapping\nAWSTemplateFormatVersion: &quot;2010-09-09&quot;\nMappings: \n  RegionMap: \n    us-east-1:\n      HVM64: ami-0ff8a91507f77f867\n      HVMG2: ami-0a584ac55a7631c0c\n    us-west-1:\n      HVM64: ami-0bdb828fd58c52235\n      HVMG2: ami-066ee5fd4a9ef77f1\n    eu-west-1:\n      HVM64: ami-047bb4163c506cd98\n      HVMG2: ami-0a7c483d527806435\n    ap-northeast-1:\n      HVM64: ami-06cd52961ce9f0d85\n      HVMG2: ami-053cdd503598e4a9d\n    ap-southeast-1:\n      HVM64: ami-08569b978cc4dfa10\n      HVMG2: ami-0be9df32ae9f92309\nResources: \n  myEC2Instance: \n    Type: &quot;AWS::EC2::Instance&quot;\n    Properties: \n      ImageId: !FindInMap [RegionMap, !Ref &quot;AWS::Region&quot;, HVM64]\n      InstanceType: m1.small\nIntrinsic Functions and Pseudo Parameters\n!Ref‚Ä¨‚Ä≠\nReturns the value of a parameter or resource.‚Ä¨‚Ä≠ When you specify a resource‚Äôs logical name, it‚Ä¨‚Ä≠ outputs a value that you can use to refer to that resource (e.g., instance id, bucket name, API ID).‚Ä¨ ‚Ä≠ Usually, in a stack, there‚Äôll be dependencies between resources.\nFor example, if you want to attach an Elastic IP address (EIP) to an EC2 instance, you must specify the instance using its instance id. The thing is, the instance id won‚Äôt be available until the EC2 instance is created, so hardcoding it in the CloudFormation template is not possible. To get around this, we can use the Ref function to retrieve the instance id once it‚Äôs available and have CloudFormation insert it during stack creation.\nResources:\n  MyEC2Instance:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: ami-0cd490fb43e2559ed\n      InstanceType: t2.micro\n  MyEIP:\n    Type: AWS::EC2::EIPz\n    Properties:\n        InstanceId: !Ref MyEC2Instance\n!FindInMap\nThis one only works with the Mappings section. FindInMap returns a named value based on a specified key. For example, suppose you have custom AMIs in us-east-1 and us-east-2. And you want to make sure their image ids are accessible at runtime regardless of the region the stack is deployed. First, create a two-level map under the Mappings section. Each map is a key that points to a name-value pair. Make the regions your top-level keys, followed by a name-value pair that represents the AMI name and its corresponding image id. Retrieve the image ids with FindInMap using the syntax below:\nMappings:\n  MyRegions:\n    us-east-1:\n      CustomUbuntu: ami-0cd490fb43e2559ed\n    us-east-2:\n      CustomUbuntu: ami-01581ffba5551cdf3\n \nResources:\n  MyEC2Instance:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !FindInMap [ MyRegions, !Ref &quot;AWS::Region&quot;, CustomUbuntu ]\n      InstanceType: t2.micro\n!GetAtt\nReturns the value of an attribute from a resource. This intrinsic function works similar to how the !Ref function works. Except that this time, there are more values to choose from depending on the resource.\nSyntax for the function name (shorthand):\n!GetAtt logicalNameOfResource.attributeName\nThe AWS::EC2::Instance resource contains attributes such as the availability zone where the specified instance is launched, its private and public IP address, and public DNS name. If you want to retrieve the public IP of the MyEC2Instance resource, use the !GetAtt MyEC2Instance.PublicIp function. Always check the documentation for the attributes available to a particular resource.\n\ndocs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacks.html‚Ä¨\ndocs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html‚Ä¨\ndocs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html‚Ä¨\n"},"services/CloudTrail":{"title":"CloudTrail","links":["tags/api"],"tags":["cloud-trail","api","monitoring"],"content":"CloudTrail Features\n\nCloudTrail event history is used to recordapi calls for\n\nGovernance\nCompliance operation\nRisk auditing purposes\n\n\n\n\n\n                  \n                  Warning\n                  \n                \n\nCloudTrail is not a service that is used for identifying application performance issues.\n\n"},"services/CloudWatch":{"title":"CloudWatch","links":["SNS","Lambda","API-Gateway","tags/timeout"],"tags":["cloudwatch","timeout"],"content":"CloudWatch Features\n\nCloudWatch alarms can be used to send SNS notifications when an alarm changes state.\nCloudWatch is not the correct service to use to send a copy of the  invocation record for failed Lambda invocations.\n\nCloudWatch Concepts\n\nNamespaces\n\nA namespace is a container for CloudWatch metrics. Metrics in different namespaces are isolated from each other, so that metrics from different applications are not mistakenly aggregated into the same statistics.\nThe AWS namespaces typically use the following naming convention:¬†AWS/{service}service. For example, Amazon EC2 uses the¬†AWS/EC2¬†namespace.\n\n\nMetrics\n\nTime-ordered set of data points that are published to CloudWatch.\nMetrics cannot be deleted, but they automatically expire after 15 months if no new data is published to them.\nData points older than 15 months expire on a rolling basis\nMetrics are uniquely defined by a name, a namespace, and zero or more dimensions.\nEach data point in a metric has a time stamp, and (optionally) a unit of measure.\n\n\nDimensions\n\nA dimension is a name/value pair that is part of the identity of a metric.\nYou can assign up to 30 dimensions to a metric.\n\n\n\nMetrics\n\nRetention\n\nData points less than 60 seconds are available for 3 hors. (High-res)\nData points with a period of\n\n60 seconds are available for 15 days.\n300 seconds are available for 63 days.\n3600 seconds are available for 455 days / 15 months.\n\n\n\n\nConcepts\n\nCount\n\nCount relates to the total number of API requests in a given period. It will not help you to understand why the API is timing out.\n\n\nLatency\n\nLatency relates to the time between when API Gateway receives a request from a client and when it returns a response to the client. The latency includes the integration latency and other API Gateway overhead. This is useful because a latency issue could be causing thetimeout.\n\n\nIntegrationLatency\n\nIntegrationLatency relates to the time between when API Gateway relays a request to the backend and when it receives a response from the backend. This is useful because a latency issue could be causing the timeout.\n\n\n\n\n\n\n\n                  \n                  Memory Utilization \n                  \n                \n\nThe metrics that AWS provides can be collected at the hypervisor level. But memory metrics (like disk metrics) is from the OS level. So it is a custom metric that you have to periodically push to CloudWatch. Sourde\n\n"},"services/CodeBuild":{"title":"CodeBuild","links":[],"tags":[],"content":""},"services/CodeCommit":{"title":"CodeCommit","links":[],"tags":[],"content":""},"services/CodeDeploy":{"title":"CodeDeploy","links":["EC2","ECS","Lambda"],"tags":["code-deploy","ci-cd"],"content":"CodeDeploy Features\n\nUses Port 443\nLifecycle\n\nApplicationStop\nBeforeInstall\nAfterInstall\nApplicationStart\nValidateService\n\n\nCompute platforms available:\n\nEC2 / On-premises\nECS\nLambda\n\n\nDeployment configurations\n\nCanary\n\nTraffic is shifted in two increments.\n\n\nLinear\n\nTraffic is shifted in equal increments with an equal number of minutes between each increment.\n\n\nAll-at-once\n\nAll traffic is shifted.\n\n\n\n\nDeployment types\n\nIn-place\n\nOnly deployments that use the EC2/On-Premises compute platform can use in-place deployments.\n\n\nBlue/Green\n\n\n\nAppSpec File\nAppSpec File Structure\nECS\nversion: 0.0\nresources: \n  ecs-service-specifications\nhooks: \n  deployment-lifecycle-event-mappings\nEC2\nversion: 0.0\nos: operating-system-name\nfiles:\n  source-destination-files-mappings\npermissions:\n  permissions-specifications\nhooks:\n  deployment-lifecycle-event-mappings\nLambda\nversion: 0.0\nresources: \n  lambda-function-specifications\nhooks: \n  deployment-lifecycle-event-mappings\nExample AppSpec File for EC2\nversion: 0.0\nos: linux\nfiles:\n  - source: /\n    destination: /var/www/html/WordPress\nhooks:\n  BeforeInstall:\n    - location: scripts/install_dependencies.sh\n      timeout: 300\n      runas: root\n  AfterInstall:\n    - location: scripts/change_permissions.sh\n      timeout: 300\n      runas: root\n  ApplicationStart:\n    - location: scripts/start_server.sh\n    - location: scripts/create_test_db.sh\n      timeout: 300\n      runas: root\n  ApplicationStop:\n    - location: scripts/stop_server.sh\n      timeout: 300\n      runas: root\n "},"services/CodePipeline":{"title":"CodePipeline","links":["S3","CodeCommit","CodeBuild","CloudFormation","ECS","ElasticBeanstalk","CodeDeploy","SNS","Lambda","Step-Functions"],"tags":["code-pipeline","ci-cd"],"content":"CodePipeline Features\n\nCodePipeline allows you to create a test stage with a test action prior to the deployment stage.\nWhen an action is failed in a stage, there are two options:\n\nStop and wait\nStop and abondon\n\n\nA pipeline of workflow is composed of stages.\nExecution modes:\n\nüìå SUPERSEDED\nQUEUED\nPARALLEL\n\n\nStatus:\n\nInProgress\nStopping\nStopped\nSucceeded\nSuperseded\nFailed\n\n\nThe flow of pipeline executions can be controlled by:\n\nA transition\nAn approval action\nA failure\n\n\nAction integrations üîó\n\nSource action integrations\n\nElastic Container Registry\nS3\nConnections to Bitbucket Cloud, GitHub (version 2), GitLab etc.\nCodeCommit\nGitHub (version 1)\n\n\nBuild action integrations\n\nCodeBuild\nCloudBees√ºJenkins\nTeamCity\n\n\nTest action integrations\n\nCodeBuild\nAWS Device Farm\nGhost Inspector\nOpenText LoadRunner\n\n\nDeploy action integrations\n\nS3\nAWS AppConfig\nCloudFormation and StackSets deploy actions\nECS\nElasticBeanstalk\nAWS OpsWork\nCodeDeploy\nAmazon Alexa\nService Catalog\nXebiaLabs\n\n\nApproval action integration with SNS\n\nPush notifications to mobile device users\nEmail recipients\nOther distributed services\n\n\nInvoke action integrations\nLambda\nSnyk\nStep Functions\n\n\n"},"services/Cognito":{"title":"Cognito","links":[],"tags":["cognito","authentication"],"content":"Cognito Features\n\nTerminology\n\nWeb Identity Federation\n\nAllows users to access AWS resources after they are authenticated with a web-based IdP like Amazon, Facebook, or Google\n\n\nUser pool\n\nThe directory of users, such as user profiles of the app\nAdaptive authentication\n\nA feature of advanced security that detects potential malicious activity and applies additional security to user profiles.\n\n\n\n\nIdentity pool\n\nAuthorize authenticated ot anonymous users to access AWS res.\nCreates token to retrieve temporary credentials from AWS STS\nGrants role-based and attribute-based access control.\n\n\n\n\n\n"},"services/DynamoDB":{"title":"DynamoDB","links":["tags/string","tags/number","tags/boolean","tags/binary","tags/list","tags/json","tags/high-throughput","tags/az","IAM","tags/java","tags/dotnet","tags/version"],"tags":["dynamodb","string","number","boolean","binary","list","json","high-throughput","az","java","dotnet","version"],"content":"DynamoDB Features\n\nA mix of key-value and document database.\nThe value can bestring,number,boolean,binary,list,json\nProvideshigh-throughput and single-digit latency\nBy Replicates data across multipleaz\nPermissions are handles by IAM service. No need to provide a db-endpoint, username or password.\nCore components\n\nTable\n\nThe name must be unique for the base table it is associated with, but you can use the same name for indexes that are associated with different base tables.\n\n\nItem\nAttribute\n\n\nOptimistic locking üîó (java  anddotnet )\n\nOptimistic locking is a strategy to ensure that the client-side item that you are updating (or deleting) is the same as the item in Amazon DynamoDB\nIt allows only update an item if the version on the server was not changed. If another user updates it before you, just retrieve the item with a freshversion and then trying to update it.\n\n\nPartitions\n\nHot partitions\n\nA hot partition occurs when a disproportionate amount of traffic is directed toward a single partition.\nResults in\n\nThrottling\nLatency\nUneven performance\n\n\n\n\nCold partitions\n\nOpposite of hot partitions.\nOccurs when a partition is under utilized.\n\n\n\n\n\ndocs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html‚Ä¨\ndocs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html‚Ä¨\n‚Ä≠\nPrimary and Secondary Keys\nPrimary Keys\n\nPartition key\n\nunique value of an item in a table\n\n\nComposite Key (Partition Key + Sort Key)\n\nPartition Key\nSort key\n\n\n\nSecondary Keys\n\nEvery secondary index is associated with exactly one table, from which it obtains its data\nYou also define the attributes that you want to be projected, or copied, from the base table into the index. DynamoDB copies these attributes into the index, along with the primary key attributes from the base table. You can then query or scan the index just as you would query or scan a table.\nTypes of secondary indexes\n\nLocal Secondary Index (LSI)\n\nA local secondary index uses the same partition key as defined on the table, but a different attribute as the sort key\nCan only be created during the table creation\nSupport both eventual and strong consistency\nAn index that has the same partition key as the base table, but a different sort key. A local secondary index is ‚Äúlocal‚Äù in the sense that every partition of a local secondary index is scoped to a base table partition that has the same partition key value\nThe partition key must be the same as the base table‚Äôs partition key, and the sort key must be a non-key base table attribute.\n\n\nGlobal Secondary Index (GSI)\n\nCan be created and deleted any time\nSupports only eventual consistency\nA global secondary index is considered ‚Äúglobal‚Äù because queries on the index can span all of the data in the base table, across all partitions.\nA global secondary index is stored in its own partition space away from the base table and scales separately from the base table. (Different provisioned throughput)\nCan be any scalar attribute of the base table. A sort key is optional, and it too can be any scalar attribute of the base table.\n\n\n\n\n\naws.amazon.com/blogs/database/how-to-design-amazon-dynamodb-global-secondary-indexes\ndocs.aws.amazon.com/amazondynamodb/latest/developerguide/SecondaryIndexes.html\ndocs.aws.amazon.com/amazondynamodb/latest/developerguide/LSI.html\n\nProjections\n\nWhen creating an LSI or GSI you set the list of attributes that you want to project or copy from the base table to the secondary index.\nThe primary keys (partition and sort key) are always projected into the secondary index, but you can also specify non-key attributes that will be projected into the index.\nThree options in projecting attributes:\n\nKEYS_ONLY - all items of an index will only contain the base table‚Äôs primary keys that you set.\nINCLUDE - allow you to choose other non-key attributes that will be included along with the primary keys of your base table.\nALL - all attributes from your base table will be copied into your secondary index.\n\n\n\ndocs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.html\nQuery &amp; Scan\n\nüçÉ Query\n\nPerforms a direct look-up to specific items you want to search for based on a partition key\nMore performant than Scan operations, e\n\n\nüçÇ Scan\n\nScan operation will literally read and return every item in a table\nOptionally provide a filter expression when requesting a Scan to return only a subset of items in the‚Ä¨‚Ä≠ table. However, the filtering occurs only after the scan is completed. In effect, you will still be charged for all‚Ä¨‚Ä≠ items read\n\n\n\nRead &amp; Write Capacity\n\nRead Capacity\n\nOn-Demand Mode\n\nDynamoDB charges you for the reads that your application performs on your tables in terms of read‚Ä¨ ‚Ä≠ request units\n1 Read Request Unit (RRU) equals\n\n4KB/s strongly consistent\n8KB/s eventually consistent\n\n\n\n\nProvisioned Mode\n\nWe specify the number of reads and writes per second that you require for‚Ä¨‚Ä≠ your application.\nCan use auto-scaling to adjust your table‚Äôs provisioned capacity automatically in response‚Ä¨‚Ä≠ to traffic changes\n\n\n\n\nWrite Capacity\n\nOn-Demand Mode\n\n1 Write Request Unit (WRU) equals to 1 write of up to 1 KB/s\n\n\n\n\n\ndocs.aws.amazon.com/amazondynamodb/latest/developerguide/capacity-mode.html\n\nDynamoDB Streams\n\nCaptures item-level changes in a DynamoDB table in near-real-time\nWhen‚Ä¨‚Ä≠ an item is modified using any of the write operations (‚Ä¨‚Ä≠PutItem, UpdateItem, or DeleteItem‚Ä¨‚Ä≠), DynamoDB detects it as an event and sends the modified record to a transaction log.\nRetained for 24 hours\nOrders are preserved\nCan be used for\n\nAggregation of data for auditing\nNotification\n\n\nThe Stream View Type determines what kind of data you want to capture.\n\nKEYS_ONLY - only the key attributes (Partition Key + Sort Key) of the modified item are captured.\nNEW_IMAGE - the latest state of the entire modified item will be captured.\nOLD_IMAGES - the entire item as it appeared prior to the update is captured.\nNEW_AND_OLD_IMAGES - both the latest and the previous state prior to the update is captured.\n\n\n\n\n\n                  \n                  Tip\n                  \n                \n\nIf you need a more complex streaming application, you might want to configure DynamoDB to send records to‚Ä¨\n‚Ä≠ a Kinesis Data stream.\n\n\n\ndocs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\naws.amazon.com/blogs/database/dynamodb-streams-use-cases-and-design-patterns/\ndocs.aws.amazon.com/amazondynamodb/latest/developerguide/kds.html\n\nDynamoDB Accelerator (DAX)\n\n\nIn-memory cache that is purposely built for DynamoDB\n\n\nResponse times in microseconds for millions of requests per second\n\n\nDoesn‚Äôt support strong consistency\n\n\nUse DAX\n\nYou have a read-intensive application that requires response time in the microsecond range.\nYou have a large set of data that are frequently read.\nYour application can eventually tolerate consistent reads.\n\n\n\nDon‚Äôt use DAX\n\nYour application requires strongly consistent reads.\nYour application performs more writes than reads.\n\n\n\naws.amazon.com/dynamodb/global-tables/\n\n\naws.amazon.com/blogs/database/how-to-use-amazon-dynamodb-global-tables-to-power-multiregion-architectures/\n\n\n\nSDK Examples\n\nRequest parameters:\n\n‚ÄúReturnConsumedCapacity\n\nTOTAL: Total number of the capacity consumed\nINDEXES: Total number of capacity consumed  with subtotals for base and secondary indexes affected table.\nNONE: No return\n\n\n\n\nPutItem üîó\nUpdateItem üîó\n-\n- Atomic counters\n- Not an idempotent action\n- Can bu used to track number of visitors\n- Not a solution for apps that overcounter/undercounter sensitive\n- UpdateExpression\n- SET - Adds one or more attributes and values to an item. If any of these attributes already exist, they are replaced by the new values. You can also use SET to add or subtract from an attribute that is of type Number. For example: SET myNum = myNum + :val. Supports the following functions:\n- if_not_exists (path, operand) - if the item does not contain an attribute at the specified path, then if_not_exists evaluates to operand; otherwise, it evaluates to path. You can use this function to avoid overwriting an attribute that may already be present in the item.\n- list_append (operand, operand) - evaluates to a list with a new element added to it. You can append the new element to the start or the end of the list by reversing the order of the operands.\n- REMOVE - Removes one or more attributes from an item.\n- ADD - Adds the specified value to the item, if the attribute does not already exist.\n- ReturnValue\n- NONE - If ReturnValues is not specified, or if its value is NONE, then nothing is returned. (This setting is the default for ReturnValues.)\n- ALL_OLD - Returns all of the attributes of the item, as they appeared before the UpdateItem operation.\n- UPDATED_OLD - Returns only the updated attributes, as they appeared before the UpdateItem operation.\n- ALL_NEW - Returns all of the attributes of the item, as they appear after the UpdateItem operation.\n- UPDATED_NEW - Returns only the updated attributes, as they appear after the UpdateItem operation.\n\nAWS Reserved Words\n \nABORT\nABSOLUTE\nACTION\nADD\nAFTER\nAGENT\nAGGREGATE\nALL\nALLOCATE\nALTER\nANALYZE\nAND\nANY\nARCHIVE\nARE\nARRAY\nAS\nASC\nASCII\nASENSITIVE\nASSERTION\nASYMMETRIC\nAT\nATOMIC\nATTACH\nATTRIBUTE\nAUTH\nAUTHORIZATION\nAUTHORIZE\nAUTO\nAVG\nBACK\nBACKUP\nBASE\nBATCH\nBEFORE\nBEGIN\nBETWEEN\nBIGINT\nBINARY\nBIT\nBLOB\nBLOCK\nBOOLEAN\nBOTH\nBREADTH\nBUCKET\nBULK\nBY\nBYTE\nCALL\nCALLED\nCALLING\nCAPACITY\nCASCADE\nCASCADED\nCASE\nCAST\nCATALOG\nCHAR\nCHARACTER\nCHECK\nCLASS\nCLOB\nCLOSE\nCLUSTER\nCLUSTERED\nCLUSTERING\nCLUSTERS\nCOALESCE\nCOLLATE\nCOLLATION\nCOLLECTION\nCOLUMN\nCOLUMNS\nCOMBINE\nCOMMENT\nCOMMIT\nCOMPACT\nCOMPILE\nCOMPRESS\nCONDITION\nCONFLICT\nCONNECT\nCONNECTION\nCONSISTENCY\nCONSISTENT\nCONSTRAINT\nCONSTRAINTS\nCONSTRUCTOR\nCONSUMED\nCONTINUE\nCONVERT\nCOPY\nCORRESPONDING\nCOUNT\nCOUNTER\nCREATE\nCROSS\nCUBE\nCURRENT\nCURSOR\nCYCLE\nDATA\nDATABASE\nDATE\nDATETIME\nDAY\nDEALLOCATE\nDEC\nDECIMAL\nDECLARE\nDEFAULT\nDEFERRABLE\nDEFERRED\nDEFINE\nDEFINED\nDEFINITION\nDELETE\nDELIMITED\nDEPTH\nDEREF\nDESC\nDESCRIBE\nDESCRIPTOR\nDETACH\nDETERMINISTIC\nDIAGNOSTICS\nDIRECTORIES\nDISABLE\nDISCONNECT\nDISTINCT\nDISTRIBUTE\nDO\nDOMAIN\nDOUBLE\nDROP\nDUMP\nDURATION\nDYNAMIC\nEACH\nELEMENT\nELSE\nELSEIF\nEMPTY\nENABLE\nEND\nEQUAL\nEQUALS\nERROR\nESCAPE\nESCAPED\nEVAL\nEVALUATE\nEXCEEDED\nEXCEPT\nEXCEPTION\nEXCEPTIONS\nEXCLUSIVE\nEXEC\nEXECUTE\nEXISTS\nEXIT\nEXPLAIN\nEXPLODE\nEXPORT\nEXPRESSION\nEXTENDED\nEXTERNAL\nEXTRACT\nFAIL\nFALSE\nFAMILY\nFETCH\nFIELDS\nFILE\nFILTER\nFILTERING\nFINAL\nFINISH\nFIRST\nFIXED\nFLATTERN\nFLOAT\nFOR\nFORCE\nFOREIGN\nFORMAT\nFORWARD\nFOUND\nFREE\nFROM\nFULL\nFUNCTION\nFUNCTIONS\nGENERAL\nGENERATE\nGET\nGLOB\nGLOBAL\nGO\nGOTO\nGRANT\nGREATER\nGROUP\nGROUPING\nHANDLER\nHASH\nHAVE\nHAVING\nHEAP\nHIDDEN\nHOLD\nHOUR\nIDENTIFIED\nIDENTITY\nIF\nIGNORE\nIMMEDIATE\nIMPORT\nIN\nINCLUDING\nINCLUSIVE\nINCREMENT\nINCREMENTAL\nINDEX\nINDEXED\nINDEXES\nINDICATOR\nINFINITE\nINITIALLY\nINLINE\nINNER\nINNTER\nINOUT\nINPUT\nINSENSITIVE\nINSERT\nINSTEAD\nINT\nINTEGER\nINTERSECT\nINTERVAL\nINTO\nINVALIDATE\nIS\nISOLATION\nITEM\nITEMS\nITERATE\nJOIN\nKEY\nKEYS\nLAG\nLANGUAGE\nLARGE\nLAST\nLATERAL\nLEAD\nLEADING\nLEAVE\nLEFT\nLENGTH\nLESS\nLEVEL\nLIKE\nLIMIT\nLIMITED\nLINES\nLIST\nLOAD\nLOCAL\nLOCALTIME\nLOCALTIMESTAMP\nLOCATION\nLOCATOR\nLOCK\nLOCKS\nLOG\nLOGED\nLONG\nLOOP\nLOWER\nMAP\nMATCH\nMATERIALIZED\nMAX\nMAXLEN\nMEMBER\nMERGE\nMETHOD\nMETRICS\nMIN\nMINUS\nMINUTE\nMISSING\nMOD\nMODE\nMODIFIES\nMODIFY\nMODULE\nMONTH\nMULTI\nMULTISET\nNAME\nNAMES\nNATIONAL\nNATURAL\nNCHAR\nNCLOB\nNEW\nNEXT\nNO\nNONE\nNOT\nNULL\nNULLIF\nNUMBER\nNUMERIC\nOBJECT\nOF\nOFFLINE\nOFFSET\nOLD\nON\nONLINE\nONLY\nOPAQUE\nOPEN\nOPERATOR\nOPTION\nOR\nORDER\nORDINALITY\nOTHER\nOTHERS\nOUT\nOUTER\nOUTPUT\nOVER\nOVERLAPS\nOVERRIDE\nOWNER\nPAD\nPARALLEL\nPARAMETER\nPARAMETERS\nPARTIAL\nPARTITION\nPARTITIONED\nPARTITIONS\nPATH\nPERCENT\nPERCENTILE\nPERMISSION\nPERMISSIONS\nPIPE\nPIPELINED\nPLAN\nPOOL\nPOSITION\nPRECISION\nPREPARE\nPRESERVE\nPRIMARY\nPRIOR\nPRIVATE\nPRIVILEGES\nPROCEDURE\nPROCESSED\nPROJECT\nPROJECTION\nPROPERTY\nPROVISIONING\nPUBLIC\nPUT\nQUERY\nQUIT\nQUORUM\nRAISE\nRANDOM\nRANGE\nRANK\nRAW\nREAD\nREADS\nREAL\nREBUILD\nRECORD\nRECURSIVE\nREDUCE\nREF\nREFERENCE\nREFERENCES\nREFERENCING\nREGEXP\nREGION\nREINDEX\nRELATIVE\nRELEASE\nREMAINDER\nRENAME\nREPEAT\nREPLACE\nREQUEST\nRESET\nRESIGNAL\nRESOURCE\nRESPONSE\nRESTORE\nRESTRICT\nRESULT\nRETURN\nRETURNING\nRETURNS\nREVERSE\nREVOKE\nRIGHT\nROLE\nROLES\nROLLBACK\nROLLUP\nROUTINE\nROW\nROWS\nRULE\nRULES\nSAMPLE\nSATISFIES\nSAVE\nSAVEPOINT\nSCAN\nSCHEMA\nSCOPE\nSCROLL\nSEARCH\nSECOND\nSECTION\nSEGMENT\nSEGMENTS\nSELECT\nSELF\nSEMI\nSENSITIVE\nSEPARATE\nSEQUENCE\nSERIALIZABLE\nSESSION\nSET\nSETS\nSHARD\nSHARE\nSHARED\nSHORT\nSHOW\nSIGNAL\nSIMILAR\nSIZE\nSKEWED\nSMALLINT\nSNAPSHOT\nSOME\nSOURCE\nSPACE\nSPACES\nSPARSE\nSPECIFIC\nSPECIFICTYPE\nSPLIT\nSQL\nSQLCODE\nSQLERROR\nSQLEXCEPTION\nSQLSTATE\nSQLWARNING\nSTART\nSTATE\nSTATIC\nSTATUS\nSTORAGE\nSTORE\nSTORED\nSTREAM\nSTRING\nSTRUCT\nSTYLE\nSUB\nSUBMULTISET\nSUBPARTITION\nSUBSTRING\nSUBTYPE\nSUM\nSUPER\nSYMMETRIC\nSYNONYM\nSYSTEM\nTABLE\nTABLESAMPLE\nTEMP\nTEMPORARY\nTERMINATED\nTEXT\nTHAN\nTHEN\nTHROUGHPUT\nTIME\nTIMESTAMP\nTIMEZONE\nTINYINT\nTO\nTOKEN\nTOTAL\nTOUCH\nTRAILING\nTRANSACTION\nTRANSFORM\nTRANSLATE\nTRANSLATION\nTREAT\nTRIGGER\nTRIM\nTRUE\nTRUNCATE\nTTL\nTUPLE\nTYPE\nUNDER\nUNDO\nUNION\nUNIQUE\nUNIT\nUNKNOWN\nUNLOGGED\nUNNEST\nUNPROCESSED\nUNSIGNED\nUNTIL\nUPDATE\nUPPER\nURL\nUSAGE\nUSE\nUSER\nUSERS\nUSING\nUUID\nVACUUM\nVALUE\nVALUED\nVALUES\nVARCHAR\nVARIABLE\nVARIANCE\nVARINT\nVARYING\nVIEW\nVIEWS\nVIRTUAL\nVOID\nWAIT\nWHEN\nWHENEVER\nWHERE\nWHILE\nWINDOW\nWITH\nWITHIN\nWITHOUT\nWORK\nWRAPPED\nWRITE\nYEAR\nZONE "},"services/EBS":{"title":"EBS","links":["EC2"],"tags":["ebs","storage","storage/block"],"content":"Amazon Elastic Block Store (Amazon EBS) provides scalable, high-performance block storage resources that can be used with Amazon EC2 instances.\nEBS Features\n\nStorage resources\n\nEBS Volumes\nEBS snapshots\n\n\n"},"services/EC2":{"title":"EC2","links":["CloudFormation","IAM","tags/role","tags/policy","EBS","EFS","S3","tags/cache","tags/az"],"tags":["ec2","role","policy","cache","az"],"content":"EC2 Features\n\nInstance\n\nInstance generations\n\nGeneral purpose\n\nM\nT\n\n\nCompute optimized\n\nC\n\n\nMemory optimized\n\nR\nU\nX\n\n\nStorage optimized\n\nD\nH\nI\n\n\nAccelerated computing\n\nDL\nF\nG\nGr\nInf\nP\nTrn\nVT\n\n\nHigh-perforance computing\n\nHpc\n\n\n\n\nInstance types\n\nCan be found by:\n\nAWS Console\nAWS CLI\n\n\n\n\nAttributes\n\nAvailability types üîó\nvCPUs or Cores\nMemory GiB\nNetwork performance\nLocal instance storage\n\n\nFleet Instances\n\nAvailable only  with\n\nEC2 API üîó\nAWS CLI üîó\nAWS SDK üîó\nAWS CloudFormation üîó\n\n\nEach fleet can be defined in only one region.\n\n\nMetadata\n\nüìå The URL is http://169.254.169.254/latest/\n\ndynamic\nmeta-data/\n\nami-id\nami-launch-index\nami-manifest-path\nblock-device-mapping/\nhostname\niam/\n\nsecurity-credentials/\n\nMyEC2Role\n\nreturns short-lived credentials through IAM role\n\n\n\n\n\n\ninstance-action\ninstance-id\ninstance-type\nlocal-hostname\nlocal-ipv4\nmac\nmetrics/\nnetwork/\nplacement/\nprofile\npublic-hostname\npublic-ipv4\npublic-keys/\nreservation-id\nsecurity-groups\nservices/\n\n\n`√πser-data\n\n\n‚úÖ We can get IAMrole name\n‚ùå We cannot get retrieve IAMpolicy\n\n\n\n\nStorage\n\nStorage options\n\nEBS\n\nMultiple EBS volumes can be attached to an instance.\nPersists independently from the life of its associated instance.\n\n\nInstance store\n\nTemporary block-level storage for instances.\nThe data on an instance store volume persists only during the life of the associated instance; if you stop, hibernate, or terminate an instance, any data on instance store volumes is lost.\n\n\nEFS\n\nNot support on Windows\nUse an EFS file system as a common data source for workloads and applications running on multiple instances.\n\n\nS3\n\nEC2 uses Amazon S3 to store EBS snapshots and instance store-backed AMIs.\n\n\nFSx\n\nAmazon FSx is a fully-managed service that supports a wide range of workloads. You can choose between these widely-used file systems: Lustre, NetApp ONTAP, OpenZFS, and Windows File Server.\n\n\nAmazon File Cache\n\nFully managed, high-speedcache on AWS that‚Äôs used to process file data, regardless of where the data is stored.\n\n\n\n\nRoot device type\n\nEBS\nINSTANCE-STORE\n\n\nRAID (Redundant Array of Independent Disks)\n\nVirtualization technology that combines multiple disk drives into a single logical unit to improve performance, redundancy, or both.\nRAID Levels\n\nRAID 0 (Striping)\n\nIncrease performance\n\n\nRAID 1(Mirroring)\n\nProvides redundancy\n\n\nRAID 5 (Striping with Parity)\n\nBalances performance and redundancy\n\n\nRAID 10 (RAID 1+0)\n\nCombines the benefits of RAID 0 and RAID 1.\n\n\n\n\n\n\n\n\n\nEC2 Auto Scaling üîó\n\nHelps you ensure that you have the correct number of EC2 instances available to handle the load for your application.\nThe collection of EC2 instances are called Auto Scaling Group.\nMinimum and Maximum number of instances can be defined.\nMultipleaz is available and evenly distributed to them.\nIf group includes spot instances, instances are automatically replaced with spot instances.\n"},"services/ECS":{"title":"ECS","links":["tags/role","tags/iam"],"tags":["ecs","container","role","iam"],"content":"ECS Features\n\nECS Instance\n\nInstances are deregistered\n\nManually if the instance in the STOPPED state.\nAutomatically if the instance is the RUNNING state.\n\n\n\n\nECS Roles\n\nContainer instance role\n\nAllows ECS container agent running in instances to call ECS API on our behalf. It attaches  ecsInstanceRolerole\n\n\nTask execution role üîó‚Ä¨\nTask role üîó\n\n\nTasks\n\nParameters which are defined in a task:\n\nDocker image to use with each container in a task.\nCPU and memory allocation\nLaunch type to use\n\nEC2\nFargate\n\n\nLogging configuration\n\nbridge\nhost\nawsvpc\nnone\n\n\nVolumes that should be mounted\nTask executioniam role\n\n\n\n\nTask placement strategies üîó\n\nbinpack\n\nPlaces tasks on a few instaces as possible.\nPlace tasks based on the least available amount of CPU or memory. This minimizes the number of instances in use.\n\n\nrandom\n\nPlace tasks randomly.\nNo config is required\n\n\nspread\n\nMaximize availability\nPlace tasks evenly based on the specified value.\nAccepted values are attribute key-value pairs,¬†instanceId, or¬†host.\n\n\n\n\n\nSample Task Definitions\nFargate\n{\n    &quot;family&quot;: &quot;sample-fargate&quot;, \n    &quot;networkMode&quot;: &quot;awsvpc&quot;, \n    &quot;containerDefinitions&quot;: [\n        {\n            &quot;name&quot;: &quot;fargate-app&quot;, \n            &quot;image&quot;: &quot;public.ecr.aws/docker/library/httpd:latest&quot;, \n            &quot;portMappings&quot;: [\n                {\n                    &quot;containerPort&quot;: 80, \n                    &quot;hostPort&quot;: 80, \n                    &quot;protocol&quot;: &quot;tcp&quot;\n                }\n            ], \n            &quot;essential&quot;: true, \n            &quot;entryPoint&quot;: [\n                &quot;sh&quot;,\n\t\t&quot;-c&quot;\n            ], \n            &quot;command&quot;: [\n                &quot;/bin/sh -c \\&quot;echo &#039;&lt;html&gt; &lt;head&gt; &lt;title&gt;Amazon ECS Sample App&lt;/title&gt; &lt;style&gt;body {margin-top: 40px; background-color: #333;} &lt;/style&gt; &lt;/head&gt;&lt;body&gt; &lt;div style=color:white;text-align:center&gt; &lt;h1&gt;Amazon ECS Sample App&lt;/h1&gt; &lt;h2&gt;Congratulations!&lt;/h2&gt; &lt;p&gt;Your application is now running on a container in Amazon ECS.&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&#039; &gt;  /usr/local/apache2/htdocs/index.html &amp;&amp; httpd-foreground\\&quot;&quot;\n            ]\n        }\n    ], \n    &quot;requiresCompatibilities&quot;: [\n        &quot;FARGATE&quot;\n    ], \n    &quot;cpu&quot;: &quot;256&quot;, \n    &quot;memory&quot;: &quot;512&quot;\n}"},"services/EFS":{"title":"EFS","links":["EC2"],"tags":["efs","storage/file"],"content":"Elastic File System Features\n\nProvides a scalable, shared file system for use with EC2 instances\nStorage classes\n\nStandard\nInfrequent Access\nArchive\n\n\nPerformance modes\n\nGeneral Purpose mode\nMax I/O\n\n\nFile system types üîó\n\nRegional\nOne Zone\n\n\n"},"services/EKS":{"title":"EKS","links":["EFS","S3"],"tags":["eks","container"],"content":"EKS Features\n\nRun in\n\nAWS cloud\nOn-premise\n\n\nAn EKS platform consists of two components:\n\nEKS control plane\nEKS node (registeres with the plane)\n\n\nStorage options\n\nElastic Block Storage\nEFS\nS3\n\n\n\n‚Ä¨\n‚Ä≠"},"services/ElasticBeanstalk":{"title":"ElasticBeanstalk","links":["VPC","tags/canary-testing","tags/blue-green-deployment"],"tags":["elastic-beanstalk","canary-testing","blue-green-deployment"],"content":"ElasticBeanstalk Features\n\nStorage\n\nEBS Volumes\n\nBlock storage that is assigned to EC2 instance.\nEach volume can only be assigned to one instance.\n\n\n\n\nInstance Lifecycles\n\nPending\nTerminated\nStopping\nStopped\nShutting-down\nTerminated\n\n\n\nConfiturations\n\nConfigurations can be saved:\n\nElasticBeanstalk Console\nEB CLI\nAWS CLI\n\n\n\nConfiguration Changes üîó\n\nMany configuration changes can be applied to a running environment without replacing existing instances. For example, setting a health check URL triggers an environment update to modify the load balancer settings.\nChanges that modify launch configuration or VPC settings require terminating all instances.\nPolicies for configuration setting replacement:\n\n1Ô∏è‚É£ Rolling Updates: keeps minimum number of instances and serves traffic to them.\n\nRolling Based on Health (No single-instance environment)\nRolling Based on Time (No single-instance environment)\n\n\n2Ô∏è‚É£ Immutable Updates: ElasticBeanstalk launches a temporary Auto Scaling group outside of the environment with separate instances. After, those will be put behind load balancer. When new instances pass health checks, new instances are moved to environment‚Äôs Auto Scaling group and terminates the temporary group and old instances.\n3Ô∏è‚É£ Disabled: ElasticBeanstalk terminates the existing environment‚Äôs instances and replaces them with the new instances.\n\n\n\nDeployment Policies (DeploymentPolicy) üîó\n\nAll at Once:\n\nüçè Fastest\nüçé Involves a service interruption - downtime.\nRolling back requires a further All at Once update.\n\n\nRolling: (No single-instance environment)\n\nUpdate a few instance at a time, then move onto the next bucket.\nüçé Reduced capacity during deployment.\nüçè No additional cost.\nRolling back requires a further Rolling update.\n\n\nRolling with Additional Batch: (No single-instance environment)\n\nüçè Maintains full capacity.\nüçé Extra additional cost.\nüçé Longer deployment\nRolling back requires a further Rolling update.\n\n\nüçÉ Immutable:\n\nSpins up new instances in a new ASG, deploys version to these instances and then swaps.\nüçè Maintains full capacity.\nüçé High cost (double capacity)\nüçé Longest deployment\nüçÉ Preferred for mission critical production systems.\n\n\nüçÉ Traffic Splitting: (No single-instance environment)\n\nPerforms an immutable deployment.\nSplits the traffic between the old and the new deployment, enablescanary-testing\n\n\n\n\n\n                  \n                  Blue/Green Deployment \n                  \n                \n\nElasticBeanstalk also supportsblue-green-deployment . To do this, deploy the new version to a separate environment, and then swap the CNAMEs of the two environments to redirect traffic to the new version instantly.\n\n\nConfig Files\n\n.ebextensions folder: (Amazon Linux 1)\n\nfiles must have .config extension.\n\n\nProcfile\nBuildfile\nPlatform Hooks\n\nRolling Updates üîó\n.ebextensions/rolling-updates.config\noption_settings:\n  aws:elasticbeanstalk:command:\n    DeploymentPolicy: Rolling\n    BatchSizeType: Percentage\n    BatchSize: 25"},"services/Elasticache":{"title":"Elasticache","links":["tags/database","tags/cache"],"tags":["elasticache","database","cache"],"content":"Elasticache Features\n\n\nCaching strategies\n\nCache-Aside (Lazy loading)\n\ninitial overhead due to cache miss for requested data.\nMost common strategy: application first checks cache,\n\ncache hit: for a given parameters, then return it.\ncache miss: querydatabase , populate the cache and return it.\n\n\n\n\nWrite-Through\n\nThecache is proactively updated immediately following the primary database update.\nWhen the primary database is updated, cache will also be updated.\nBetter performance due to large cache.\nInfrequently accessed data also written to the cachesha\n\n\nüçÉ A proper caching strategy includes effective use of both write-through and lazy loading of your data and setting an appropriate expiration for the data to keep it relevant and lean.\n\n\n"},"services/EventBridge":{"title":"EventBridge","links":["tags/stream"],"tags":["event-bridge","stream"],"content":"EventBridge Features\n\nEventBridge delivers a near-real-timestream of system events that describe changes in Amazon Web Services resources.\n"},"services/IAM":{"title":"IAM","links":["tags/arn","S3","KMS","Lambda"],"tags":["permission","role","policy","arn"],"content":"IAM Features\n\nIdentity Sources\n\nIdentity Center directory\nActive Directory\nExternal identity provider\n\n\n\nIAM Identity\ncan be an:\n\nIAM User\nIAM Role\nIAM Group\n\ndocs.aws.amazon.com/IAM/latest/UserGuide/id_groups.html\ndocs.aws.amazon.com/IAM/latest/UserGuide/id_users.html\ndocs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html\nIAM Roles\n\nAn IAM role can be assumed by AWS Services to perform actions on your behalf.\nIAM Roles are for:\n\nAWS Services\nExternal Users (IdP)\n\n\nIAM Roles use time-limited security credentials.\n\nIAM Groups\n\nThe policies attached to an IAM Group are inherited by the IAM users under it.\nIt‚Äôs possible to assign an IAM user to multiple groups.\nGroups cannot be nested.\n\nIAM Policy\n\nAn IAM identity cannot perform AWS actions without an IAM Policy attached to it unless the resource being accessed allows the IAM Identity to do so.\nAWS evaluates all explicit DENY requests first.\nResource-based policies are evaluated first.\n\ndocs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html‚Ä¨\nIAM Policy Types to Choose\n\nAWS Managed Policies\nCustomer-managed Policy\nInline Policy\n\nWhen you use an inline policy, the permissions in the policy cannot be inadvertently attached to the wrong principal entity.\nDoesn‚Äôt have its own ARN\nCan‚Äôt be referenced\n\n\n\nTypes of IAM Policies\n\nIdentity-based policies\nResource-based policies\nIAM permissions boundaries\nService Control Policies\nSession policies\nAccess Control Lists (ACLs)\n\nIAM Policy Structure\nIt is made up of two components:\n\nPolicy-wide information üåó\n\nVersion element\n\n\nStatement(s)\n\nüåó Statement ID (Sid)\n\nLabel purpose - useful for identification\n\n\nüåù Effect\n\nCan be only Allow or Deny\n\n\nüåù Action\n\nList of actions\nUse * grant access to all or subset of AWS operations:\n\nec2:DescribeInstance* grants also\n\nDescribeInstanceAttribute,\nDescribeInstances\nDescribeInstancesStatus\n\n\n\n\n\n\nüåù Resource (Identity-based)\n\nList of AWS resources to which the Action element is applied.\nUsearn if you need to be more restrictive.\nUse * to apply the Action to all resources.\n\n\nüåù Principal (Resource-based) üîó\n\nSpecifies whom can access it\n\n\nüåó Condition\n\nUseful for applying logic to a policy.\nSome conditions\n\nStringEquals\nStringNotEquals\nStringLike\nStringNotLike\nBool\nIpAddress\nNotIpAddress\nArnEquals\nArnNotEquals\nNull: check if key is present\n\n\nWe can add IfExist to any condition above (except Null condition)\n\nStringLikeIfExists\n\n\n\n\n\n\n\ndocs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-policy-structure.html\naws.amazon.com/blogs/security/back-to-school-understanding-the-iam-policy-grammar/\nIdentity-based Policy vs. Resource-based Policy\n\nIdentity-based Policies\n\nDefines what an IAM Identity can do\nCan be attached to an IAM Identity\n\nIAM User\nIAM Group\nIAM Role\n\n\n\n\nResource-based policies\n\nDefines who can access that resource\nCan be attached to AWS resources\n\nS3 (bucket policy)\nKMS (key policy)\nLambda function\n\n\n\n\n\ndocs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html‚Ä¨\nPolicy Examples\nIdentity-based Policy\n{\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\n    &quot;Statement&quot;: [\n        {\n            &quot;Sid&quot;: &quot;AllowFullEC2AccessFromMyNetwork&quot;,\n            &quot;Effect&quot;: &quot;Allow&quot;,\n            &quot;Action&quot;: [\n                &quot;ec2:DescribeInstance*&quot;\n            ],\n            &quot;Resource&quot;: &quot;*&quot;,\n            &quot;Condition&quot;: {\n                &quot;IpAddress&quot;: {\n                    &quot;aws:SourceIp&quot;: &quot;180.0.111.0/24&quot;\n                }\n            }\n        }\n    ]\n}\nResource-based Policy\n{\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\n    &quot;Statement&quot;: [\n        {\n            &quot;Effect&quot;: &quot;Allow&quot;,\n            &quot;Principal&quot;: {\n                &quot;AWS&quot;: &quot;arn:aws:iam::123456789000:user/john&quot;\n            },\n            &quot;Action&quot;: [\n                &quot;s3:GetObject&quot;,\n                &quot;s3:GetObjectVersion&quot;\n            ],\n            &quot;Resource&quot;: [\n                &quot;arn:aws:s3:::tdojo/john-folder&quot;\n            ]\n        },\n        {\n            &quot;Effect&quot;: &quot;Allow&quot;,\n            &quot;Principal&quot;: {\n                &quot;AWS&quot;: &quot;arn:aws:iam::123456789000:user/dave&quot;\n            },\n            &quot;Action&quot;: [\n                &quot;s3:GetObject&quot;,\n                &quot;s3:GetObjectVersion&quot;\n            ],\n \n&quot;Res\nCross-account Access\nIf a user U from account A needs to access resource X from account B:\n\nAccount B must attach a resource-based policy to X that defines user X as a Principal.\nAccount A must attach an Identity-based policy to user U that defines X as a Resource\n\nIAM Roles\nIAM:PassRole\nPassRole is a special type of IAM permission that permits a user to associate IAM roles to an AWS resource. This is a simple yet powerful permission that warrants due scrutiny when constructing IAM Policies.\nScenario\nFor example:\n\nUser U has permissions to access resource A, but not B.\nResource A has permissions to execute on resource B.\nIf we:\nAttach iam:PassRole action to user U\nThen:\nUser U can access to resource B.\n\n{\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\n    &quot;Statement&quot;: [\n        {\n            &quot;Effect&quot;: &quot;Allow&quot;,\n            &quot;Action&quot;: &quot;iam:PassRole&quot;,\n            &quot;Resource&quot;: &quot;*&quot;\n        }\n    ]\n}\ndocs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_passrole.html‚Ä¨\ndocs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_iam-passrole-service.html‚Ä¨\nRole-Based Access Control\nThis method simplifies the management of access controls by grouping permissions based on roles rather than managing permissions for each individual user.\n\nCan be allocated to anyone including groups or services.\ndocs.aws.amazon.com/prescriptive-guidance/latest/saas-multitenant-api-access-authorization/access-control-types.html\n\n‚Ä≠"},"services/KMS":{"title":"KMS","links":["tags/encryption","tags/plaintext"],"tags":["kms","encryption","plaintext"],"content":"KMS Features üîó\n\nProtect your master keys by storing and managing them securely\nEnvelope encryption is the practice of encrypting plaintext data with a data key, and then encrypting the data key under another key.\nKMS keys are protected by hardware security modules (HSMs).\nCan be integrated with AWS CloudTrail to log the use of your KMS keys for\n\nAuditing\nRegulatory and compliance needs.\n\n\nüîê To encrypt data locally\n\n1Ô∏è‚É£ Use the GenerateDataKey operation to get a dataencryption key.\n2Ô∏è‚É£ Use theplaintext data key (returned in the Plaintext field of the response) to encrypt data locally, then erase the plaintext data key from memory.\n3Ô∏è‚É£ Store the encrypted data key (returned in the CiphertextBlob field of the response) alongside the locally encrypted data.\n\n\nüîë To decrypt data locally:\n\n1Ô∏è‚É£ Use the Decrypt operation to decrypt the encrypted data key. The operation returns a plaintext copy of the data key.\n2Ô∏è‚É£ Use the plaintext data key to decrypt data locally, then erase the plaintext data key from memory.\n\n\n‚Äì Create symmetric and asymmetric keys where the key material is only ever used within the service\n‚Äì Create symmetric keys where the key material is generated and used within a custom key store under your control.\n‚Äì Import your own symmetric key for use within the service.\n‚Äì Create both symmetric and asymmetric data key pairs for local use within your applications.\n‚Äì Define which IAM users and roles can manage keys.\n‚Äì Define which IAM users and roles can use keys to encrypt and decrypt data.\n‚Äì Choose to have keys that were generated by the service to be automatically rotated on an annual basis.\n‚Äì Temporarily disable keys so they cannot be used by anyone.\n‚Äì Re-enable disabled keys.\n‚Äì Schedule the deletion of keys that you no longer use.\n‚Äì Audit the use of keys by inspecting logs in AWS CloudTrail.\nKey states:\n\nEnabled\nDisabled\nPendingDeletion\nPendingImport (Only for imported keys)\n\n\n\nSources\n\nAWS Database Encryption SDK\n"},"services/Kinesis":{"title":"Kinesis","links":["CloudWatch","S3"],"tags":["kinesis","stream"],"content":"Kinesis Features\n\nNumber of consumer instances does not exceed the number of shards.\nAmazon Kinesis Data Streams limits of 5 GetRecords calls per second.\nüçÉ We recommend polling each shard one time per second per application.\nMonitoring\n\nThe metrics collected for streams are pushed to CloudWatch every minute. Archived 2 weeks.\nMonitoring types:\n\nBasic (stream-level)\n\nStream-level data is sent automatically every minute at no charge.\n\n\nEnhanced (shard-level)\n\nShard-level data is sent every minute for an additional cost. Must be specifically enabled.\n\n\n\n\n\n\n\nA stream is composed of one or more shards, each of which provides a fixed unit of capacity. The total capacity of the stream is the sum of the capacities of its shards. The Kinesis Client Library (KCL) ensures that for every shard there is a record processor running and processing that shard.\nCustom Consumers with Dedicated Throughput (Enhanced Fan-Out) üîó\n\nEnables consumers to receive records from a stream with throughput of up to 2 MB of data per second per shard.\nKinesis Data Streams pushes data records from the stream to consumers that use enhanced fan-out.  (don‚Äôt need to poll for data)\n\nHandling Duplication\n\nReasons for delivering multiple times:\n\nProducer retries\nConsumer retries\n\n\nHandling duplication\n\nThe number of duplicates due to producer retries is usually low compared to the number of duplicates due to consumer retries.\nProducer retries\n\nEmbed primary key within the record to remove duplicates.\n\n\nConsumer retries\n\nRecord Processor uses a fixed number of records per Amazon S3 file, such as 5000.\nThe file name uses this schema: Amazon S3 prefix, shard-id, and First-Sequence-Num. In this case, it could be something like sample-shard000001-10001\nAfter you upload the Amazon S3 file, checkpoint by specifying Last-Sequence-Num. In this case, you would checkpoint at record number 15000.\n\n\n\n\n"},"services/Lambda":{"title":"Lambda","links":["tags/timeout","IAM","API-Gateway","Cognito","S3","CloudWatch","CodeCommit","CloudFormation","SQS","tags/arn","tags/http-status-code","tags/concurrency","tags/vpc","tags/alias","tags/lambda-layers"],"tags":["lamda","timeout","arn","http-status-code","concurrency","vpc","alias","lambda-layers"],"content":"Lambda Features\n\nMemory\n\nIt scales proportinally to the CPU power.\nIt can range from 128 MB to 10240 MB in 1 MB increments.\n\n\nTimeout\n\nThe defaulttimeout is 3 seconds\nMaximumtimeout value of 900 seconds\n\n\nInvocation ways\n\nAWS Lambda Console\nAPI/CLI command\nThe URL of Lambda function\n\nAuth types\n\nNONE\nAWS IAM\n\n\n\n\n\n\nTriggered by (AWS Services)\n\nDynamoDB\nKinesis\nSQS\nApplication Load Balancer\nAPI Gateway\nAlexa\nCloudFront\nS3\nSNS\nSES\nCloudFormation\nCloudWatch\nCodeCommit\nCodePipeline\n\n\nServices that don‚Äôt invoke lambda functions\n\nStream or queue-based resources\n\nDynamoDB streams\nSQS queues\nKinesis Data Streams‚Ä¨\n\n\n\n\nSupported languages\n\nNode.js\nJava\nPython\nC#\nGo\n\n\nExecution environment lifecycles\n\nINIT\nINVOKE\nSHUTDOWN\n\n\n\nInvocation types\n\nSynchronous Invocation\n\nCan accept a payload of up to 6 MB\nNeed a retry logic to handle intermittent errors.\nServices that invoke Lambda functions synchronously\n\nAPI Gateway\nApplication Load Balancer\nCognito\nData Firehose\nCloudfront (Lambda@Edge)\n\n\n\n\nAsynchronous Invocation\n\nCan accept to a payload of up to 256 KB\nAWS stores the event in an internal queue\nUse cases\n\nLong-latency processes that run in the background\nBatch Operations\nVideo Encoding\nOrder processing\n\n\nServices that invoke Lambda functions asynchronously\n\nAPI Gateway by specifying Event in the  X-AMZ-Invocation-Type request header.\nS3\nCloudWatch\nEventBridge\nCodeCommit\nCloudFormation\nAWS Config\n\n\n\n\n\nDestinations\n\nDestination Options\n\nSource\n\nAsynchronous invocation\nEvent source mapping invocation\n\n\nCondition\n\nOn failure\nOn success\n\n\nDestination type\n\nSNS topic\nSQS Queue\nLambda function\nEventBridge event bus\n\n\nDestination\n\narn\n\n\n\n\n\nExample CLI Invocation\nSynchronous Invocation\naws lambda invoke \\\n    --function-name testFunction \\\n    --invocation-type RequestResponse \\\n    --cli-binary-format raw-in-base64-out \\\n    --payload &#039;{&quot;input&quot;: &quot;input_value&quot;}&#039; response.json\nAsynchronous Invocation\n aws lambda invoke \\\n--function-name testFunction \\\n--invocation-type Event \\\n--cli-binary-format raw-in-base64-out \\\n--payload &#039;{&quot;input&quot;:&quot;input_value&quot;}&#039; response.json\n \n‚Ä¨\ndocs.aws.amazon.com/lambda/latest/dg/lambda-invocation.html‚Ä≠\naws.amazon.com/blogs/architecture/understanding-the-different-ways-to-invoke-lambda-functions/‚Ä¨\nEvent source mappings\nAn event source mapping is a sort of polling agent that Lambda manages.\n\nInvokes a lambda function synchronously if:\n\nThe batch size is reached\nThe maximum batching window is reached\n\n\n\n\nDeployment\n\nYou can upload a zip file directly to the console\nYou can upload a zip file to S3, and Lambda can download it from there\nYou can paste code directly to the console\n\nDeploying Code with External Dependencies\n\nüçÇ Zip the local code and deploy to AWS Lambda\n\nDeploying multiple Lambda functions that have the same dependencies is inefficient\nSteps\n\nInstall all external dependencies\nCreate a deployment package in zip format.\nUpload to AWS Lambda\n\n\n\n\nüçÉ Lambda Layers\n\nLambda Layers lets you store any additional code separately from your deployment package\nLambda layers can be shared among Lambda functions\nLike a deployment package, external dependencies must be in zip format before being uploaded to AWS Lambda\n\n\n\ndocs.aws.amazon.com/serverlessrepo/latest/devguide/sharing-lambda-layers.html\naws.amazon.com/blogs/aws/new-for-aws-lambda-use-any-programming-language-and-share-common-components\n\nConcurrency and Throttling\n\n1000 unreserved concurrent executions across all Lambda functions for every region per account. (Can be increased by contacting AWS Support)\nWhen distributing concurrencies, unreserved count can not be less than 100. In other words, reserved concurrent execution is limited to 900.\nReturns 429http-status-code\n\nA function reaches its reserved conccurrency limit\nA function reaches unreserved concurrency limit of the account\nWhen computingconcurrency limit for a Lambda function consider:\n\nExecution time\nNumber of requests handled per second\nCalculations differ for Poll-based event sources and push-based\n\n\n\n\n\nExample Scenario\nLambda function\n\nprocesses HTTP requests from API Gateway with unreserved concurrency\nExpects an average execution time of 10 seconds\nExpects 150 requests per second.\nAt is can be seen from below, after 6th second, many requests will sart to fail.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSecond12345678910Request15015015015015015015015015010Functions1503004506007509001050120013501500\ndocs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html\naws.amazon.com/blogs/compute/managing-aws-lambda-function-concurrency/\n\nConnections to a VPC\n\nLambda functions live in an isolated and secured VPC managed by AWS\nLambda function can interact with resources inside a private subnet by\n\nShould have AWSLambdaVPCAccessExecutionRole permission (creation and deletion of Elastic Network Interface)\n\n\nEven if Lambda function is connected to public subnet,vpc still be unable to route traffic between Lambda function and the internet. To fix this:\n\nCreate a NAT Gateway in public subnet in the VPC\nAdd entry to private subnet‚Äôs route table.\n\nDestination: 0.0.0.0/0\nTarget: NAT Gateway\n\n\n\n\n\naws.amazon.com/premiumsupport/knowledge-center/internet-access-lambda-function\ndocs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html\n\nVersion and Aliases üîó\n\nAWS Lambda assigns version numbers monotonically which means version number always increases even if it is deleted.\nUnpublished version is referred as $LATEST.\nFunction uses $LATEST if the version is not specified.\nWhen you publish a new version, a :version-number suffix is appended to your function‚Äôsarn, which indicates its version, (1)\n\narn:aws:lambda:us-east-2:123456789123:function:cool-function‚Ä¨‚Ä≠:1‚Ä¨\n\n\nInvoke a function with analias is possible.\n\nAppend :alias-name suffix to the functionarn\nEveryalias has its own uniquearn\n\n\n\ndocs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html\ndocs.aws.amazon.com/lambda/latest/dg/configuration-versions.html\n\n¬†\nLambda Layers\nThe paths for different runtimes oflambda-layers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRuntimePathNode.jsnodejs/node_modulesnodejs/node16/node_modules (NODE_PATH)nodejs/node18/node_modules (NODE_PATH)nodejs/node20/node_modules (NODE_PATH)Pythonpythonpython/lib/python3.x/site-packages (site directories)Javajava/lib (CLASSPATH)Rubyruby/gems/3.2.0 (GEM_PATH)ruby/lib (RUBYLIB)All runtimesbin (PATH)lib (LD_LIBRARY_PATH)docs.aws.amazon.com/lambda/latest/dg/packaging-layers.html#packaging-layers-paths"},"services/Load-Balancer":{"title":"Load Balancer","links":["tags/security-group","tags/ip","Lambda","tags/dns"],"tags":["load-balancer","network","security-group","ip","dns"],"content":"Load Balancer Features\n\nLoad Balancers\n\nApplication Load Balancer\n\nAllows to select up to 5security-group .\nAWS assignedip address.\nCan be target Lambda in Target Group section.\nAllows multi-value headers.\n\nE.g. for query string ?name=foo&amp;name=bar\n\nIt returns ‚Äòname‚Äô: [‚Äòfoo‚Äô, ‚Äòbar‚Äô]\n\n\n\n\nProtocols\n\n‚úÖ HTTP (HyperText Transfer Protocol):\n\nSupports standard web traffic over port 80.\nCommonly used for serving web content, APIs, and other HTTP traffic.\n\n\n‚úÖ HTTPS (HyperText Transfer Protocol Secure):\n\nSupports secure web traffic over port 443 using SSL/TLS encryption.\nUsed for secure websites, APIs, and other encrypted communications.\n\n\n‚úÖ WebSocket:\n\nSupports full-duplex communication channels over a single TCP connection.\nUseful for real-time applications such as chat applications, live data feeds, etc.\nWorks over both HTTP and HTTPS.\n\n\n‚ùåUDP (User Datagram Protocol):\n\nNot supported by Application Load Balancers. UDP is typically used for low-latency and loss-tolerant connections, such as DNS, video streaming, and online gaming.\n\n\n\n\n\n\nNetwork Load Balancer\n\nAWS assignedip address and Elasticip address\nProtocols\n\n‚úÖTCP (Transmission Control Protocol):\n\nNLB supports TCP traffic, making it suitable for applications that require reliable, ordered, and error-checked delivery of a stream of bytes.\n\n\n‚úÖUDP (User Datagram Protocol):\n\nNLB supports UDP traffic, which is ideal for applications that require low-latency, connectionless communication, such asdns queries, video streaming, and online gaming.\n\n\n\n\n\n\n\n\n"},"services/Load-Balancers":{"title":"Load Balancers","links":[],"tags":[],"content":""},"services/RDS":{"title":"RDS","links":[],"tags":["rds","database"],"content":"RDS Features"},"services/S3":{"title":"S3","links":["Lambda","SNS","SQS","EventBridge"],"tags":["s3","object-storage"],"content":"S3 Features\n\nFiltering objects with prefix and suffix\nS3 Object Lambda\n\nEnables to process data with custom code\nUse cases:\n\nRedact Persoanlly Identifiable Information (PII)\nAugment data from other services\nWatermarking images on the fly\nCompressing or decompressing files as being downloaded\nConverting across data formats\n\n\n\n\nStorage Classes\n\nStandard\nStandard-Infrequent Access (IA)\n\nMinimum 30 days charge\n\n\nOne Zone-Infrequent Access (99.5 Availability)\nIntelligent Tiering\nGlacier Instant Retrieval (Minimum 90 days charge)\n\nLong-lived data\nRetrieval in miliseconds\nSuitable for accessing a few times in a year.\n\n\nGlacier Flexible Retrieval (Minimum 90 days charge)\n\nLong-term data\nRetrieval in minutes to hours\nTypes of Archive Retrievals\n\nStandard\n- Retrieval: 3 - 5 hours\nExpedited\n\nUrgent case\nExpensive\nRetrieval: 1 - 5 minutes\nCan not exceed 250 MB\n\n\nBulk\n\nFree\nRetrieval: 5 - 12 hours\n\n\n\n\n\n\nGlacier Deep Archive (Minimum 180 days charge)\n\nThe cheapest\nSuitable for long retention periods, like 10 years\nTypes of Archive Retrievals\n\nStandard\n\nRetrieval: 12 hours\n\n\nExtended/Bulk\n\nRetrieval: 48 hours\n\n\n\n\n\n\n\n\nEncryption types\n\nSSE-KMS\n\nEnforce x-amz-server-side-encryption header with aws:kms value.\nCan be encrypted with\n\nAWS-managed KMSkey\nCustomer-managed KMS key\n\nAdd kms:GenerateDataKey and kms:Decrypt policies\n\n\n\n\n\n\nSSE-S3\n\nDenies with requests that do not include x-amz-server-side-encryption header with AES256 as the value.\n\n\nSSE-C (Customer-provided enc key)\n\nOnly accepts AES-256\nEnc key must be provided along with the data\nReject HTTP requests\nheaders must include one of them\n\n x-amz-server-side-encryption-customer-algorithm‚Ä¨\n x-amz-server-side-encryption-customer-key\n x-amz-server-side-encryption-customer-key-MD5‚Ä¨\n\n\n\n\nClient-side Encryption\n\nClient is responsible for encryption/decryption\n\n\n\n\nNotifications\n\nDestinations\n\nLambda function\nSNS topic\nSQS queue\n\n\nTriggered by\n\nAll events can be send to EventBridge\nObject creation\nObject deletion\nObject ACL PUT events\nObject tagging events\nRestore object events\nReduced Redundancy Storage (RRS) object lost events\nReplication events\nS3 Lifescycle expiration events\nS3 Lifecycle transition events\nS3 Intelligent-Tiering automatic archival events\n\n\n\n\nACL\n\nPermissions\n\nREAD\nWRITE\nREAD_ACP\nWRITE_ACP\nFULL_CONTROL\n\n\n\n\n"},"services/SAM":{"title":"SAM","links":["CloudFormation","tags/cli","Lambda","S3","DynamoDB"],"tags":["sam","serverless","cli"],"content":"AWS SAM Features\n\nAn extension of CloudFormation template.\nCLI commands:cli\n\nsam init\n\nInitializes a serverless application with an AWS SAM template.\nThe template provides a folder structure for your Lambda functions\nThe template is connected to an event source such as\n\nAPIs\nS3 buckets\nDynamoDB tables.\n\n\nThis application includes everything you need to get started\nEventually extend it into a production-scale application.\n\n\n**sam build\n\nBuilds any dependencies that your application has\nCopies your application source code to folders under¬†.aws-sam/build¬†to be zipped and uploaded to Lambda.\n\n\nsam deploy\n\nPerforms the functionality of¬†sam package.\nYou can use the¬†sam deploy¬†command to directly package and deploy your application.\n\n\n\n\n"},"services/SNS":{"title":"SNS","links":["SQS","Lambda","tags/fifo"],"tags":["sns","fifo"],"content":"SNS Features\n\nPush based service\nAsynchronous\nEndpoints\n\nSQS\nLambda\nHTTP\nEmail\nMobile push notification\nSMS\n\n\nTopic Types\n\nStandard\nfifo\n\n\nDestinations\n\nEvent destinations\n\nA2A (application-to-application)\nA2P (application-to-person)\n\n\n\n\n"},"services/SQS":{"title":"SQS","links":["S3","X-Ray","tags/deduplication"],"tags":["sqs","queue","deduplication"],"content":"SQS Features\n\nWhen requesting messages from a queue, you cannot specify individual messages. Instead, you determine the maximum number of messages you wish to retrieve, up to a limit of 10.\nMessage can contain up to 256 KB including the attributes.\nUse S3 for messages larger than 256 KB.\nDefault visibility of an SQS message is 30 seconds and max 12 hours.\nDelay Queue allows you to make messages invisible for 0 - 900 seconds.\nMessages are not automatically deleted. (Must be explicitly deleted)\nDebug SQS with X-Ray service.\n\nUse the¬†X-Amzn-Trace-Id\nUse the¬†AWSTraceHeader\n\n\nReceiptId is about who received it and it changes for different receivers.\nMessage attributes\n\nUse message attributes to attach custom metadata.\nAttributes\n\nName\nType\nValue\n\n\nSupported data types\n\nString, Number, Binary, Custom\n\n\n\n\nQueue types\n\nStandard queue\nFIFO queue\n\nFIFO queues follow exactly-once processing. It introduces a parameter called MessageDeduplicationID, which is the token used for deduplication of sent messages.\nAny messages sent with the same MessageDeduplicationID are accepted successfully but aren‚Äôt delivered during the 5 minutededuplication interval. SQS remembers the MessageDeduplicationId values it‚Äôs seen for at least five minutes, which means deduplication Ids can only reduce, not completely eliminate, the chances of duplication occurring.\nOptionally, you may enable ContentBasedDeduplication to let SQS create an SHA-256 hash based on the message body and use it as the value for MessageDeduplicationId.\n\n\n\n\n\nSQS Actions\n\nBatch Actions\n\nAllows to manipulate up to 10 messages.\nTotal size can not exceed 256 Kƒ∞B.\nCan be used\n\nQuery API\nAWS SDK\n\n\nActions\n\nSendMessageBatch\n\n\nDeleteMessageBatch\n\n\nChangeMessageVisibilityBatch\n\n\n\n\nSQS actions:\n\nAddPermission\nCancelMessageMoveTask\nChangeMessageVisibility\nChangeMessageVisibilityBatch\nCreateQueue\nDelete Message\nDeleteMessageBatch\nDeleteQueue\nGetQueueAttributes\nGetQueueUrl\nListDeadLetterSourceQueues\nListMessageMoveTasks\nListQueues\nListQueueTags\nPurgeQueue\nReceiveMessage\nRemovePermission\nSendMessage\nSendMessageBatch\nSetQueueAttributes\nStartMessageMoveTask\nTagQueue\nUntagQueue\n\n\n"},"services/STS":{"title":"STS","links":["tags/http-status-code","IAM"],"tags":["sts","http-status-code"],"content":"STS Features\n\nAPI\n\nDecodeAuthorizationMessage\n\nDecodes additional information about the authorization status of a request from an encoded message returned in response to an AWS request.\nIf a user is not authorized to perform an operation that he or she has requested, the request returns a Client.UnauthorizedOperation response (a 403http-status-code  response).\nSome AWS operations additionally return an encoded message that can provide details about this authorization failure.\nThe message is encoded because the details of the authorization status can constitute privileged information that the user who requested the operation should not see. To decode an authorization status message, a user must be granted permissions via an IAM policy to request which must include sts:DecodeAuthorizationMessage action.\n\n\n\n\n"},"services/Step-Functions":{"title":"Step Functions","links":["tags/workflow"],"tags":["step-functions","workflow","orchestration"],"content":"Step Function Concepts üîó\n\nWorkflow\n\nA sequence of steps\n\n\nStates üîó\n\nIndividual steps in your state machine that can make decisions based on the input\nPerform actions from those inputs, and pass output to other states.\nStates can perform a variety of functions in your state machine:\n\nDo some work in your state machine (a¬†Task¬†state)\nMake a choice between branches of execution (a¬†Choice¬†state)\nStop an execution with a failure or success (a¬†Fail¬†or¬†Succeed¬†state)\nPass its input to its output, or inject some fixed data into the workflow (a¬†Pass¬†state)\nProvide a delay for a certain amount of time, or until a specified date and time (a¬†Wait state)\nBegin parallel branches of execution (a¬†Parallel¬†state)\nDynamically iterate steps (a¬†Map¬†state)\n\n\n\n\n\n\nActions üîó\n\nStep Functions Features\n\nTypes ofworkflow s\n\nStandard workflow\n\nTasks and states are never run more than once, unless you have specified Retry behavior in ASL.\nüí∞ Billed according to the number of state transitions processed.\nUp to 1 year\nDurable and auditable.\nRerieve execution history up to 90 days with its API.\n\n\nExpress\n\nUp to 5 minutes\nIdeal for high-volume and event-processing workloads such as\n\nIoT data ingestion\nStreaming and tranformation of data processing\n\n\nüí∞ Billed by\n\nThe number of executions\nThe duration of execution\nThe memory consumed while the execution ran\n\n\n\n\n\n\nCan be used to build\n\nDistributed applications\nAutomate processes\nOrchestrate microservices\n\n\nAbility to\n\nCoordinate system activities\nRun business logic in a particular sequence\nHandle reprocessing of data if errors occur\n\n\n\nProvides a visual interface to the system, making it easy to update and change the workflow.\nVery low maintenance overhead.\n\nError Handling üîó\n\nWhen a state reports an error and either there is no Retry field, or if retries fail to resolve the error, Step Functions scans through the catchers in the order listed in the array.\nWhen the error name appears in the value of a catcher‚Äôs ErrorEquals field, the state machine transitions to the state named in the Next field.\nRetry:\n\nTask and Parallel states can have a field named Retry, whose value must be an array of objects known as retriers.\nAn individual retrier represents a certain number of retries, usually at increasing time intervals.\nA retrier contains the following fields:\n\nErrorEquals\n\nA non-empty array of strings that match error names. When a state reports an error, Step Functions scans through the retriers. When the error name appears in this array, it implements the retry policy described in this retrier.\n\n\nIntervalSeconds\n\nAn integer that represents the number of seconds before the first retry attempt.\nüìå (1 by default).\n\n\nMaxAttempts\n\nA positive integer that represents the maximum number of retry attempts\n\nüìå (3 by default).\n\n\nA value of 0 specifies that the error or errors are never retried.\nIf the error recurs more times than specified, retries cease and normal error handling resumes.\n\n\nBackoffRate\n\nThe multiplier by which the retry interval increases during each attempt\n\nüìå (2.0 by default)\n\n\n\n\n\n\n\n\nCatch:\n\nTask and Parallel states can have a field named¬†Catch.\nThis field‚Äôs value must be an array of objects, known as¬†catchers.\nA catcher contains the following fields.\n\nErrorEquals\nA non-empty array of strings that match error names, specified exactly as they are with the retrier field of the same name.\nNext\nA string that must exactly match one of the state machine‚Äôs state names.\nResultPath\nA path¬†that determines what input is sent to the state specified in the Next field.\n\n\n\n\n\nState Machine Structure\n\nüåóComment\n\nA human-readable description of the state machine.\n\n\nüåùStartAt\n\nA string that must exactly match (is case sensitive) the name of one of the state objects.\n\n\nüåóTimeoutSeconds\n\nThe maximum number of seconds an execution of the state machine can run. If it runs longer than the specified time, the execution fails with a¬†States.Timeout¬†Error Name.\n\n\nüåó Version\n\nThe version of the Amazon States Language used in the state machine (default is ‚Äú1.0‚Äù).\n\n\nüåùStates¬†\n\nAn object containing a comma-delimited set of states.\n\n\n\nExample State Language Specifications\n{\n  &quot;Comment&quot;: &quot;An example of the Amazon States Language using a choice state.&quot;,\n  &quot;StartAt&quot;: &quot;FirstState&quot;,\n  &quot;States&quot;: {\n    &quot;FirstState&quot;: {\n      &quot;Type&quot;: &quot;Task&quot;,\n      &quot;Resource&quot;: &quot;arn:aws:lambda:us-east-1:123456789012:function:FUNCTION_NAME&quot;,\n      &quot;Next&quot;: &quot;ChoiceState&quot;\n    },\n    &quot;ChoiceState&quot;: {\n      &quot;Type&quot; : &quot;Choice&quot;,\n      &quot;Choices&quot;: [\n        {\n          &quot;Variable&quot;: &quot;$.foo&quot;,\n          &quot;NumericEquals&quot;: 1,\n          &quot;Next&quot;: &quot;FirstMatchState&quot;\n        },\n        {\n          &quot;Variable&quot;: &quot;$.foo&quot;,\n          &quot;NumericEquals&quot;: 2,\n          &quot;Next&quot;: &quot;SecondMatchState&quot;\n        }\n      ],\n      &quot;Default&quot;: &quot;DefaultState&quot;\n    },\n \n    &quot;FirstMatchState&quot;: {\n      &quot;Type&quot; : &quot;Task&quot;,\n      &quot;Resource&quot;: &quot;arn:aws:lambda:us-east-1:123456789012:function:OnFirstMatch&quot;,\n      &quot;Next&quot;: &quot;NextState&quot;\n    },\n \n    &quot;SecondMatchState&quot;: {\n      &quot;Type&quot; : &quot;Task&quot;,\n      &quot;Resource&quot;: &quot;arn:aws:lambda:us-east-1:123456789012:function:OnSecondMatch&quot;,\n      &quot;Next&quot;: &quot;NextState&quot;\n    },\n \n    &quot;DefaultState&quot;: {\n      &quot;Type&quot;: &quot;Fail&quot;,\n      &quot;Error&quot;: &quot;DefaultStateError&quot;,\n      &quot;Cause&quot;: &quot;No Matches!&quot;\n    },\n \n    &quot;NextState&quot;: {\n      &quot;Type&quot;: &quot;Task&quot;,\n      &quot;Resource&quot;: &quot;arn:aws:lambda:us-east-1:123456789012:function:FUNCTION_NAME&quot;,\n      &quot;End&quot;: true\n    }\n  }\n}"},"services/Systems-Manager":{"title":"Systems Manager","links":["EventBridge"],"tags":["systems-manager"],"content":"Application Management\nParameter Store\n\nParameter policies (Only Advanced tier):\n\nExpiration\n\nDeletes the parameter at a specific date\n\n\nExpirationNotification\n\nSends an event to Amazon EventBridge (Amazon CloudWatch Events) when the specified expiration time is reached.\n\n\nNoChangeNotification\n\nSends an event to Amazon EventBridge (Amazon CloudWatch Events) when a parameter has not been modified for a specified period of time.\n\n\n\n\nCan store\n\nPlain text\nEncrypted text\n\n\nReferencing\n\n{{ssm:parameter-name}}\nNo nested values\n\n\n\nNode Management\n\nAutomates the process of keeping your managed nodes and other services.\nSchedules the association checks.\nAn association includes three components:\n\nA document that defines the state\nTarget(s)\nA schedule\n\n\n"},"services/VPC":{"title":"VPC","links":[],"tags":[],"content":""},"services/X-Ray":{"title":"X-Ray","links":["tags/latency"],"tags":["x-ray","latency"],"content":"X-Ray Features\n\nX-Ray creates a map of services used by your application with trace data.\nYou can use the trace data to drill into specific services or issues.\nThis data provides a view of connections between services in your application and aggregated data for each service, including averagelatency and failure rates.\nCan be used to\n\nDetect bottlenecks\nVisualize distributed apps\n\n\nAPI\n\nGetTraceSummaries\n\nGet the list of trace IDs of the application.\nƒ∞ncludes ClientIp\n\n\nBatchGetTraces\n\nRetrieve the list of traces.\n\n\nGetGroup\n\nRetrieves the group resource details.\n\n\nGetServiceGraph\n\nShows which services process the incoming requests, including the downstream services that they call as a result.\n\n\nPutTraceSegments\n\nSend segment documents directly to X-Ray.\n\n\n\n\nSegments üîó\n\nA segment document can be contain\n\nA whole segment with subsegments.\nA fragment of a segment that indicates that a request is in progress.\nA single subsegment that is sent separately.\n\n\nCan be up to 64 kB.\nA trace segment is a JSON representation of a request that your application serves. A trace segment records information about the original request, information about the work that your application does locally, and subsegments with information about downstream calls that your application makes to AWS resources, HTTP APIs, and SQL databases.\n\n\nX-Ray Daemon\n\nListens for traffic on UDP port 2000\nCan be run:\n\nLocally\nOn-premise\nOn AWS Services\n\n\n\n\nAnnotations\n\nKey-value pairs that indexed for use with filter expressions.\nUse to group traces in the console when calling GetTraceSummaries.\n\n\nMetadata\n\nKey-value pairs that are not indexed for use with filter expressions.\n\n\nError categories\n\nError: Client errors 4xx\nFault: Server faults 5xx\nThrottle: Throttling errors 429\n\n\n"}}